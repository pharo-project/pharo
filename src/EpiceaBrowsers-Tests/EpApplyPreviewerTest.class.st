Class {
	#name : 'EpApplyPreviewerTest',
	#superclass : 'EpLogBrowserOperationFactoryTest',
	#category : 'EpiceaBrowsers-Tests-Integration',
	#package : 'EpiceaBrowsers-Tests',
	#tag : 'Integration'
}

{ #category : 'resources' }
EpApplyPreviewerTest >> assertEmptyPreviewLog [

	self
		assert: self outputEvents isEmpty
		description: 'Shouldn''t find anything to apply'
]

{ #category : 'resources' }
EpApplyPreviewerTest >> assertOutputsAnEventWith: aBlock [

	| outputEvents |
	outputEvents := self outputEvents.

	self assert: outputEvents size equals: 1.

	aBlock value: outputEvents anyOne
]

{ #category : 'resources' }
EpApplyPreviewerTest >> assertOutputsEventsWith: aBlock [

	| logBrowserModel outputLog |
	logBrowserModel := EpLogBrowserPresenter newWithLog: monitor log.

	outputLog :=
		EpLogBrowserOperationFactory new
			logBrowserModel: logBrowserModel;
			entries: inputEntries;
			errorHandlerBlock: [:error | error signal ];
			newApplyPreviewLog.

	aBlock value: (outputLog entries collect: [:each | each content])
]

{ #category : 'resources' }
EpApplyPreviewerTest >> outputEvents [

	| outputLog logBrowserModel |
	logBrowserModel := EpLogBrowserPresenter newWithLog: monitor log.

	outputLog :=
		EpLogBrowserOperationFactory new
			logBrowserModel: logBrowserModel;
			entries: inputEntries;
			errorHandlerBlock: [:error | error signal ];
			newApplyPreviewLog.

	^ outputLog entries collect: [:each | each content]
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testBehaviorCommentChange [

	| aClass |
	aClass := classFactory newClass.
	aClass comment: 'before'.
	self setHeadAsInputEntry.
	aClass comment: 'after'.

	self assertOutputsAnEventWith: [:output |
		self assert: output class equals: EpBehaviorCommentChange.
		self assert: output oldComment equals: 'after'.
		self assert: output newComment equals: 'before'.
		]
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testBehaviorNameChange [

	| aClass oldName newName |
	aClass := classFactory newClass.
	oldName := aClass name.
	newName := oldName, '2'.
	aClass rename: newName.
	self setHeadAsInputEntry.

	aClass rename: oldName. "Rollback"

	self assertOutputsAnEventWith: [:output |
		self assert: output class equals: EpBehaviorNameChange.
		self assert: output oldName equals: oldName.
		self assert: output newName equals: newName.
		]
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testBehaviorRepackagedChange [

	| aClass packageName tagName newPackageName newTagName |
	aClass := classFactory newClass.
	packageName := aClass package name.
	tagName := aClass packageTag name.
	newPackageName := packageName , '2'.
	newTagName := tagName , '2'.

	aClass package: newPackageName tag: newTagName.

	self setHeadAsInputEntry.

	aClass package: packageName tag: tagName.

	self assertOutputsAnEventWith: [ :output |
		self assert: output class equals: EpBehaviorRepackagedChange.
		self assert: output oldPackageName equals: packageName.
		self assert: output oldTagName equals: tagName.
		self assert: output newPackageName equals: newPackageName.
		self assert: output newTagName equals: newTagName ]
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testClassAdditionWithClassRemoved [

	| aClass classDefinition |
	aClass := classFactory newClass.
	classDefinition := aClass definitionString.
	self setHeadAsInputEntry.

	aClass removeFromSystem.

	self assertOutputsAnEventWith: [ :output |
		self assert: output class equals: EpClassAddition.
		self
			assert: output behaviorAffected definitionSource
			equals: classDefinition ]
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testClassAdditionWithInstanceVariablesChanged [

	| aClass classDefinition |
	aClass := classFactory newClass.
	classDefinition := aClass definitionString.
	self setHeadAsInputEntry.
	aClass addInstVarNamed: #x.

	self assertOutputsAnEventWith: [ :output |
		self assert: output class equals: EpClassModification.
		self
			assert: output oldClass definitionSource
			equals: aClass definitionString.
		self
			assert: output newClass definitionSource
			equals: classDefinition ]
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testClassAdditionWithSuperclassChanged [

	| aClass classDefinition |
	aClass := classFactory newClass.
	classDefinition := aClass definitionString.
	self setHeadAsInputEntry.
	aClass superclass: Array.

	self assertOutputsAnEventWith: [ :output |
		self assert: output class equals: EpClassModification.
		self
			assert: output oldClass definitionSource
			equals: aClass definitionString.
		self
			assert: output newClass definitionSource
			equals: classDefinition ].

	aClass superclass: Object "Restore original superclass else something in hierarchy stays wrong (and ClassHierarchyTest>>testSubclassInstVar fails)"
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testClassRemovalWithClassAdded [

	| aClass className |
	aClass := classFactory newClass.
	className := aClass name.
	aClass removeFromSystem.

	self setHeadAsInputEntry.

	aClass := classFactory newClass.
	aClass rename: className.

	self assertOutputsAnEventWith: [ :output |
		self assert: output class equals: EpClassRemoval.
		self
			assert: output behaviorAffected definitionSource
			equals: aClass definitionString ]
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testKeepChangeWhenMethodAdditionWithAbsentBehavior [

	| aClass |
	aClass := classFactory newClass.
	aClass compile: 'fortyTwo ^42' classified: 'number'.
	self setHeadAsInputEntry.
	aClass removeFromSystem.

	self assertOutputsAnEventWith: [:output |
		self assert: output class equals: EpMethodAddition ]
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testKeepChangeWhenMethodModificationWithAbsentBehavior [

	| aClass |
	aClass := classFactory newClass.
	aClass compile: 'fortyTwo ^42' classified: 'number'.
	aClass compile: 'fortyTwo ^nil' classified: 'number'.
	self setHeadAsInputEntry.
	aClass removeFromSystem.

	self assertOutputsAnEventWith: [:output |
		self assert: output class equals: EpMethodModification ]
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testMethodAdditionWithMethodRemoved [

	| aClass |
	aClass := classFactory newClass.
	aClass compile: 'fortyTwo ^42' classified: 'number'.
	self setHeadAsInputEntry.
	aClass removeSelector: #fortyTwo.

	self assertOutputsAnEventWith: [:output |
		self assert: output class equals: EpMethodAddition.
		self assert: output methodAffectedSourceCode equals: 'fortyTwo ^42'.
		self assert: output methodAffectedProtocol equals: 'number'.
		]
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testMethodAdditionWithProtocolChanged [

	| aClass |
	aClass := classFactory newClass.
	aClass compile: 'fortyTwo ^42' classified: 'number'.
	self setHeadAsInputEntry.
	(aClass>>#fortyTwo) protocol: 'none'.

	self assertOutputsAnEventWith: [:output |
		self assert: output class equals: EpMethodModification.
		self assert: output oldSourceCode equals: 'fortyTwo ^42'.
		self assert: output oldProtocol equals: 'none'.
		self assert: output newSourceCode equals: 'fortyTwo ^42'.
		self assert: output newProtocol equals: 'number'.
		]
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testMethodAdditionWithSourceCodeChanged [

	| aClass |
	aClass := classFactory newClass.
	aClass compile: 'fortyTwo ^42' classified: 'number'.
	self setHeadAsInputEntry.
	aClass compile: 'fortyTwo ^nil'.

	self assertOutputsAnEventWith: [:output |
		self assert: output class equals: EpMethodModification.
		self assert: output oldSourceCode equals: 'fortyTwo ^nil'.
		self assert: output oldProtocol equals: 'number'.
		self assert: output newSourceCode equals: 'fortyTwo ^42'.
		self assert: output newProtocol equals: 'number'.
		]
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testMethodModificationWithMethodRemoved [

	| aClass |
	aClass := classFactory newClass.
	aClass compile: 'fortyTwo ^42' classified: 'number'.
	aClass compile: 'fortyTwo ^nil' classified: 'number'.
	self setHeadAsInputEntry.
	aClass removeSelector: #fortyTwo.

	self assertOutputsAnEventWith: [:output |
		self assert: output class equals: EpMethodAddition.
		self assert: output methodAffectedSourceCode equals: 'fortyTwo ^nil'.
		self assert: output methodAffectedProtocol equals: 'number'.
		]
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testMethodRemovalWithMethodAdded [

	| aClass |
	aClass := classFactory newClass.
	aClass compile: 'fortyTwo ^42' classified: 'number'.
	aClass removeSelector: #fortyTwo.
	self setHeadAsInputEntry.
	aClass compile: 'fortyTwo ^42' classified: 'number'.

	self assertOutputsAnEventWith: [:output |
		self assert: output class equals: EpMethodRemoval.
		self assert: output methodAffectedSourceCode equals: 'fortyTwo ^42'.
		self assert: output methodAffectedProtocol equals: 'number'.
		]
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testNonCodeChangeEvent [

	monitor logEntryCommented:
		(EpLogEntriesComment
			entryReferences: #()
			oldComment: ''
			newComment: '42').

	self setHeadAsInputEntry.

	self assertEmptyPreviewLog
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testPackageTagAdditionWithPackageTagRemoval [

	self packageOrganizer ensureTag: classFactory tagName inPackage: classFactory packageName.
	self setHeadAsInputEntry.
	self packageOrganizer removeTag: classFactory tagName fromPackage: classFactory packageName.

	self assertOutputsAnEventWith: [ :output |
		self assert: output class equals: EpPackageTagAddition.
		self assert: output packageName equals: classFactory packageName.
		self assert: output tagName equals: classFactory tagName ]
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testPackageTagRemovalWithPackageTagAddition [

	self packageOrganizer ensureTag: classFactory tagName inPackage: classFactory packageName.
	self packageOrganizer removeTag: classFactory tagName fromPackage: classFactory packageName.
	self setHeadAsInputEntry.

	self packageOrganizer ensureTag: classFactory tagName inPackage: classFactory packageName.

	self assertOutputsAnEventWith: [ :output |
		self assert: output class equals: EpPackageTagRemoval.
		self assert: output packageName equals: classFactory packageName.
		self assert: output tagName equals: classFactory tagName ]
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testPackageTagRenameWithPreviousRollback [

	self packageOrganizer ensureTag: classFactory tagName inPackage: classFactory packageName.

	self packageOrganizer renameTag: classFactory tagName to: classFactory tagName , '2' inPackage: classFactory packageName.
	self setHeadAsInputEntry.
	self packageOrganizer renameTag: classFactory tagName , '2' to: classFactory tagName inPackage: classFactory packageName. "Rollback"

	self assertOutputsAnEventWith: [ :output |
		self assert: output class equals: EpPackageTagRename.
		self assert: output packageName equals: classFactory packageName.
		self assert: output oldTagName equals: classFactory tagName.
		self assert: output newTagName equals: classFactory tagName , '2' ]
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testProtocolAdditionWithProtocolRemoved [

	| aClass |
	aClass := classFactory newClass.
	aClass addProtocol: 'protocol'.
	self setHeadAsInputEntry.
	aClass removeProtocol: 'protocol'.

	self assertOutputsAnEventWith: [ :output |
		self assert: output class equals: EpProtocolAddition.
		self assert: output protocol equals: 'protocol' ]
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testProtocolRemovalWithProtocolAdded [

	| aClass |
	aClass := classFactory newClass.
	aClass addProtocol: 'protocol'.
	aClass removeProtocol: 'protocol'.
	self setHeadAsInputEntry.
	aClass addProtocol: 'protocol'.

	self assertOutputsAnEventWith: [ :output |
		self assert: output class equals: EpProtocolRemoval.
		self assert: output protocol equals: 'protocol' ]
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testRedundantBehaviorCommentChange [

	| aClass |
	aClass := classFactory newClass.
	aClass comment: 'before'.
	aClass comment: 'after'.
	aClass comment: 'before'.
	self setHeadAsInputEntry.

	self assertEmptyPreviewLog
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testRedundantBehaviorCommentChangeWithAbsentBehavior [

	| aClass |
	aClass := classFactory newClass.
	aClass comment: 'before'.
	self setHeadAsInputEntry.
	aClass removeFromSystem.

	self assertEmptyPreviewLog
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testRedundantBehaviorRepackagedChange [

	| aClass package tag newPackage newTag |
	aClass := classFactory newClass.
	package := aClass package name.
	tag := aClass packageTag name.
	newPackage := package , '2'.
	newTag := tag , '2'.
	aClass package: newPackage tag: newTag.
	aClass package: package tag: tag. "Rollback"
	self setHeadAsInputEntry.

	self assertEmptyPreviewLog
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testRedundantBehaviorRepackagedChangeWithAbsentBehavior [

	| aClass package tag newPackage newTag |
	aClass := classFactory newClass.
	package := aClass package name.
	tag := aClass packageTag name.
	newPackage := package , '2'.
	newTag := tag , '2'.
	aClass package: newPackage tag: newTag.
	aClass package: package tag: tag. "Rollback"
	self setHeadAsInputEntry.
	aClass removeFromSystem.

	self assertEmptyPreviewLog
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testRedundantClassAddition [
	classFactory newClass.
	self setHeadAsInputEntry.

	self assertEmptyPreviewLog
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testRedundantClassRemoval [

	| aClass |
	aClass := classFactory newClass.
	aClass removeFromSystem.
	self setHeadAsInputEntry.

	self assertEmptyPreviewLog
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testRedundantMethodAddition [

	| aClass |
	aClass := classFactory newClass.
	aClass compile: 'fortyTwo ^42' classified: 'number'.
	self setHeadAsInputEntry.

	self assertEmptyPreviewLog
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testRedundantMethodModification [

	| aClass |
	aClass := classFactory newClass.
	aClass compile: 'fortyTwo ^42' classified: 'number'.
	aClass compile: 'fortyTwo ^nil' classified: 'number'.
	self setHeadAsInputEntry.

	self assertEmptyPreviewLog
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testRedundantMethodRemoval [

	| aClass |
	aClass := classFactory newClass.
	aClass compile: 'fortyTwo ^42' classified: 'number'.
	aClass removeSelector: #fortyTwo.
	self setHeadAsInputEntry.

	self assertEmptyPreviewLog
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testRedundantMethodRemovalWithAbsentBehavior [

	| aClass |
	aClass := classFactory newClass.
	aClass compile: 'fortyTwo ^42' classified: 'number'.
	aClass removeSelector: #fortyTwo.
	self setHeadAsInputEntry.
	aClass removeFromSystem.

	self assertEmptyPreviewLog
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testRedundantPAckageTagRenameWithAbsentTag [

	self packageOrganizer ensureTag: classFactory tagName inPackage: classFactory packageName.
	self packageOrganizer renameTag: classFactory tagName to: classFactory tagName , '2' inPackage: classFactory packageName.
	self setHeadAsInputEntry.

	self assertEmptyPreviewLog
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testRedundantPackageTagAddition [

	self packageOrganizer ensureTag: classFactory tagName inPackage: classFactory packageName.
	self setHeadAsInputEntry.

	self assertEmptyPreviewLog
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testRedundantPackageTagRemoval [

	self packageOrganizer ensureTag: classFactory tagName inPackage: classFactory packageName.
	self packageOrganizer removeTag: classFactory tagName fromPackage: classFactory packageName.
	self setHeadAsInputEntry.

	self assertEmptyPreviewLog
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testRedundantProtocolAddition [

	| aClass |
	aClass := classFactory newClass.
	aClass addProtocol: 'protocol'.
	self setHeadAsInputEntry.

	self assertEmptyPreviewLog
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testRedundantProtocolRemoval [

	| aClass |
	aClass := classFactory newClass.
	aClass addProtocol: 'protocol'.
	aClass removeProtocol: 'protocol'.
	self setHeadAsInputEntry.

	self assertEmptyPreviewLog
]

{ #category : 'tests - multiple changes' }
EpApplyPreviewerTest >> testRedundantSequenceOfMethodModifications [

	| aClass |
	aClass := classFactory newClass.
	aClass compile: 'fortyTwo ^42' classified: 'number'.
	aClass compile: 'fortyTwo ^43' classified: 'number'.
	aClass compile: 'fortyTwo ^44' classified: 'number'.
	self setMonitorLogAsInputEntries.

	self assertEmptyPreviewLog
]

{ #category : 'tests - multiple changes' }
EpApplyPreviewerTest >> testSequenceOfClassAndMethodAddition [

	| aClass |
	aClass := classFactory newClass.
	aClass compile: 'fortyTwo ^42' classified: 'number'.
	self setMonitorLogAsInputEntries.

	aClass removeSelector: #fortyTwo.
	aClass removeFromSystem.

	self assertOutputsEventsWith: [:output |
		| outputClasses |
		outputClasses := output collect: #class as: Array.
		self assert: outputClasses equals: { EpPackageTagAddition . EpClassAddition . EpMethodAddition }.
		]
]

{ #category : 'tests - multiple changes' }
EpApplyPreviewerTest >> testSequenceOfMethodModifications [

	| aClass |
	aClass := classFactory newClass.
	aClass compile: 'fortyTwo ^42' classified: 'number'.
	aClass compile: 'fortyTwo ^43' classified: 'number'.
	aClass compile: 'fortyTwo ^44' classified: 'number'.
	self setMonitorLogAsInputEntries.

	aClass removeSelector: #fortyTwo.
	aClass removeFromSystem.

	self assertOutputsEventsWith: [:output |
		| outputClasses |
		outputClasses := output collect: #class as: Array.
		self assert: outputClasses equals: { EpPackageTagAddition . EpClassAddition . EpMethodModification }.
		self assert: output last methodAffectedSourceCode equals: 'fortyTwo ^44'.
		]
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testTraitAdditionWithTraitRemoved [

	| aTrait traitDefinition |
	aTrait := classFactory newTrait.
	traitDefinition := aTrait definitionString.
	self setHeadAsInputEntry.

	aTrait removeFromSystem.

	self assertOutputsAnEventWith: [ :output |
		self assert: output class equals: EpTraitAddition.
		self
			assert: output behaviorAffected definitionSource
			equals: traitDefinition ]
]

{ #category : 'tests' }
EpApplyPreviewerTest >> testTraitRemovalWithTraitAdded [

	| aTrait traitName traitDefinition |
	aTrait := classFactory newTrait.
	traitName := aTrait name.
	traitDefinition := aTrait definitionString.
	aTrait removeFromSystem.
	self setHeadAsInputEntry.

	aTrait := classFactory newTrait.
	aTrait rename: traitName.

	self assertOutputsAnEventWith: [ :output |
		self assert: output class equals: EpTraitRemoval.
		self
			assert: output behaviorAffected definitionSource
			equals: traitDefinition ]
]
