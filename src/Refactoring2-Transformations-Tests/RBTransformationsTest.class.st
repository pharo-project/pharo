Class {
	#name : #RBTransformationsTest,
	#superclass : #RBAbstractTransformationTest,
	#category : #'Refactoring2-Transformations-Tests-Test'
}

{ #category : #running }
RBTransformationsTest >> setUp [

	super setUp.
	model := self rbModelForVariableTest
]

{ #category : #tests }
RBTransformationsTest >> testAddClassTransform [

	| transformation class |
	transformation := (RBAddClassCommentTransformation
		                   comment: 'New comment for class'
		                   in: self changeMockClass name) primitiveExecute.

	self assert: transformation model changes changes size equals: 1.

	class := transformation model classNamed: self changeMockClass name.
	self assert: class comment equals: 'New comment for class'
]

{ #category : #tests }
RBTransformationsTest >> testAddMethodCommentTransform [

	| transformation method |
	transformation := (RBAddMethodCommentTransformation
		                   comment: 'New comment for method'
		                   inMethod: #one
		                   inClass: self changeMockClass name)
		                  primitiveExecute.

	self assert: transformation model changes changes size equals: 1.

	method := (transformation model classNamed: self changeMockClass name)
		          methodFor: #one.
	self
		assert: method ast comments first contents
		equals: 'New comment for method'
]

{ #category : #tests }
RBTransformationsTest >> testAddMethodTransform [

	| transformation class |
	transformation := (RBAddMethodTransformation
		                   sourceCode: 'printString1 ^super printString'
		                   in: self changeMockClass name
		                   withProtocol: #accessing ) primitiveExecute.

	class := transformation model classNamed: self changeMockClass name.
	self
		assert: (class parseTreeForSelector: #printString1)
		equals: (self parseMethod: 'printString1 ^super printString')
]

{ #category : #tests }
RBTransformationsTest >> testAddProtocolTransform [

	| transformation |
	transformation := (RBAddProtocolTransformation new
		                   protocol: 'transforming'
		                   inClass: #RBDummyEmptyClass) primitiveExecute.

	self assert: transformation model changes changes size equals: 1
]

{ #category : #tests }
RBTransformationsTest >> testAddTemporaryVariableTransform [

	| transformation class |
	transformation := (RBAddTemporaryVariableTransformation
		                   variable: 'variable'
		                   inMethod: #one
		                   inClass: self changeMockClass name)
		                  primitiveExecute.

	self assert: transformation model changes changes size equals: 1.

	class := transformation model classNamed:
		         self changeMockClass name asSymbol.
	self assert: (class directlyDefinesMethod: #one).
	self
		assert: (class parseTreeForSelector: #one) temporaries size
		equals: 1
]

{ #category : #tests }
RBTransformationsTest >> testAddVariableAccessorTransform [

	| transformation class |
	transformation := (RBAddVariableAccessorTransformation
		                   instanceVariable: 'instVar'
		                   class: self changeMockClass name)
		                  primitiveExecute.

	self assert: transformation model changes changes size equals: 2.

	class := transformation model classNamed:
		         self changeMockClass name asSymbol.
	self
		assert: (class parseTreeForSelector: #instVar)
		equals: (self parseMethod: 'instVar ^instVar').
	self
		assert: (class parseTreeForSelector: #instVar:)
		equals: (self parseMethod: 'instVar: anObject instVar := anObject')
]

{ #category : #tests }
RBTransformationsTest >> testAddVariableTransform [

	| transformation class |
	transformation := (RBAddVariableTransformation
		                   instanceVariable: 'asdf'
		                   class: self changeMockClass name)
		                  primitiveExecute.

	self assert: transformation model changes changes size equals: 1.

	class := transformation model classNamed:
		         self changeMockClass name asSymbol.
	self assert: (class directlyDefinesInstanceVariable: 'asdf')
]

{ #category : #tests }
RBTransformationsTest >> testCompositeTransform [

	| transformation newClassName class |
	newClassName := (self changeMockClass name , 'Temporary') asSymbol.
	transformation := RBCompositeTransformation new transformations:
		                  (OrderedCollection new
			                   add: (RBInsertNewClassTransformation
					                    addClass: newClassName
					                    superclass: #Object
					                    subclasses: #(  )
					                    category: self class category);
			                   add: (RBAddVariableTransformation
					                    instanceVariable: 'asdf'
					                    class: newClassName);
			                   add: (RBAddMethodTransformation
					                    sourceCode: 'printString1 ^super printString'
					                    in: newClassName
					                    withProtocol: #accessing );
			                   yourself).
	transformation primitiveExecute.

	self assert: transformation model changes changes size equals: 3.

	class := transformation model classNamed:
		         (self changeMockClass name , 'Temporary') asSymbol.
	self assert: (class directlyDefinesInstanceVariable: 'asdf').
	self
		assert: (class parseTreeForSelector: #printString1)
		equals: (self parseMethod: 'printString1 ^super printString')
]

{ #category : #tests }
RBTransformationsTest >> testCustomTransform [

	| transformation newClassName class |
	newClassName := (self changeMockClass name , 'Temporary') asSymbol.
	transformation := RBCustomTransformation with: [ :aModel | "add class"
		                  aModel defineClass: ('<1p> %<%< #<2s>
				package: <3p>'
				                   expandMacrosWith: 'Object'
				                   with: newClassName
				                   with: self class category).

		                  "add a comment in the class description"
		                  (aModel classNamed: newClassName) comment:
			                  'Deprecated!!! Use super class'.
		                  "add an instance variable"
		                  (aModel classNamed: newClassName)
			                  addInstanceVariable: 'asdf' ].

	transformation primitiveExecute.
	self assert: transformation model changes changes size equals: 3.

	class := transformation model classNamed:
		         (self changeMockClass name , 'Temporary') asSymbol.
	self assert: (class directlyDefinesInstanceVariable: 'asdf')
]

{ #category : #tests }
RBTransformationsTest >> testDeprecateClassTransform [

	| transformation class |
	transformation := (RBDeprecateClassTransformation class:
		                   self changeMockClass name) primitiveExecute.

	self assert: transformation model changes changes size equals: 4.

	class := transformation model classNamed:
		         self changeMockClass name asSymbol.
	self assert: class comment equals: 'Deprecated!!! Use superclass'.

	class := transformation model metaclassNamed:
		         self changeMockClass name.

	self
		assert: (class parseTreeForSelector: #new)
		equals: (self parseMethod: 'new
				self deprecated: ''Use superclass '' on: ''4 May 2016''  in: #Pharo60.
				^ super new').
	self
		assert: (class parseTreeForSelector: #deprecated)
		equals: (self parseMethod: 'deprecated ^ true').
	self
		assert: (class parseTreeForSelector: #systemIcon)
		equals: (self parseMethod: 'systemIcon
				^ Smalltalk ui icons iconNamed: #packageDelete')
]

{ #category : #tests }
RBTransformationsTest >> testMoveInstanceVariableToClassTransform [

	| transformation oldClass newClass |
	model := RBNamespace new.
	model defineClass: 'Object << #FOOBAR
				slots: { #asdf };
				package: #''Refactory-Test data'''.

	transformation := RBMoveInstanceVariableToClassTransformation
		                  model: model
		                  variable: 'asdf'
		                  fromClass: #FOOBAR
		                  toClass: self changeMockClass name.

	oldClass := transformation model classNamed: #FOOBAR.
	newClass := transformation model classNamed:
		            self changeMockClass name asSymbol.
	self assert: (oldClass directlyDefinesInstanceVariable: 'asdf').
	self deny: (newClass directlyDefinesInstanceVariable: 'asdf').

	transformation primitiveExecute.
	self assert: transformation model changes changes size equals: 3.

	oldClass := transformation model classNamed: #FOOBAR.
	newClass := transformation model classNamed:
		            self changeMockClass name asSymbol.
	self deny: (oldClass directlyDefinesInstanceVariable: 'asdf').
	self assert: (newClass directlyDefinesInstanceVariable: 'asdf')
]

{ #category : #tests }
RBTransformationsTest >> testPullUpVariableTransform [

	| transformation |
	transformation := (RBPullUpVariableTransformation
		                   instanceVariable: 'result'
		                   class: #RBDummyLintRuleTest) primitiveExecute.

	self assert:
		((transformation model classNamed: #RBDummyLintRuleTest)
			 directlyDefinesInstanceVariable: 'result').

	self deny:
		((transformation model classNamed: #RBBasicDummyLintRuleTest)
			 directlyDefinesInstanceVariable: 'result').
	self deny:
		((transformation model classNamed: #RBFooDummyLintRuleTest)
			 directlyDefinesInstanceVariable: 'result')
]

{ #category : #tests }
RBTransformationsTest >> testPushDownVariableTransform [

	| transformation |
	transformation := (RBPushDownVariableTransformation
		                   instanceVariable: 'foo1'
		                   class: #RBDummyLintRuleTest) primitiveExecute.

	(transformation model classNamed: #RBDummyLintRuleTest) subclasses
		do: [ :each |
		self assert: (each directlyDefinesInstanceVariable: 'foo1') ]
]

{ #category : #tests }
RBTransformationsTest >> testRemoveClassTransform [

	| transformation newClass superclass |
	transformation := (RBRemoveClassTransformation className:
		                   self changeMockClass name) primitiveExecute.
	self assert: transformation model changes changes size equals: 1.
	newClass := transformation model classNamed:
		            self changeMockClass name asSymbol.
	superclass := transformation model classNamed: #Object.
	self assert: newClass isNil.
	newClass := self changeMockClass name.
	self assert:
		((superclass subclasses collect: [ :each | each name ]) includes:
			 newClass) not.
	self assert:
		((superclass classSide subclasses collect: [ :each | each name ])
			 includes: newClass) not
]

{ #category : #tests }
RBTransformationsTest >> testRemoveMessageSendTransform [

	| transformation class |
	transformation := (RBRemoveAllMessageSendsTransformation new
		messageSend: #cr
		inMethod: (#called:, #on:) asSymbol
		inClass: #RBClassDataForRefactoringTest)
		primitiveExecute.

	self assert: transformation model changes changes size equals: 1.

	class := transformation model classNamed: #RBClassDataForRefactoringTest.
	self assert: (class parseTreeForSelector: (#called:, #on:) asSymbol)
			equals:  (self parseMethod: 'called: anObject on: aBlock
	Transcript show: anObject printString.
	aBlock value')
]

{ #category : #tests }
RBTransformationsTest >> testRemoveMethodTransform [

	| transformation class |
	transformation := (RBRemoveMethodTransformation
		                   selector: #one
		                   from: self changeMockClass name) primitiveExecute.

	self assert: transformation model changes changes size equals: 1.

	class := transformation model classNamed:
		         self changeMockClass name asSymbol.
	self deny: (class directlyDefinesMethod: #one)
]

{ #category : #tests }
RBTransformationsTest >> testRemoveVariableTransform [

	| transformation class |
	transformation := (RBRemoveVariableTransformation
		                   instanceVariable: 'instVar'
		                   class: self changeMockClass name)
		                  primitiveExecute.

	self assert: transformation model changes changes size equals: 1.

	class := transformation model classNamed:
		         self changeMockClass name asSymbol.
	self deny: (class directlyDefinesInstanceVariable: 'instVar')
]

{ #category : #tests }
RBTransformationsTest >> testRenameClassTransform [

	| transformation class newClassName oldClassName |
	newClassName := #RBNewDummyClassName.
	oldClassName := RBClassToRename name asSymbol.
	transformation := (RBRenameClassTransformation
		                   rename: oldClassName
		                   to: newClassName) primitiveExecute.

	self assert: transformation model changes changes size equals: 10.

	class := transformation model classNamed: newClassName.
	self
		assert: (class parseTreeForSelector: #method1)
		equals: (self parseMethod: 'method1 ^ self method2').

	self deny: (transformation model includesClassNamed: oldClassName).

	class := transformation model classNamed:
		         RBSubclassOfClassToRename name asSymbol.

	self
		assert: class superclass
		equals:
		(transformation model classNamed: 'RBNewDummyClassName' asSymbol).

	self
		assert: (class parseTreeForSelector: #symbolReference)
		equals: (self parseMethod: 'symbolReference ^ #RBNewDummyClassName').
	self
		assert: (class parseTreeForSelector: #reference)
		equals: (self parseMethod: 'reference ^ RBNewDummyClassName new')
]

{ #category : #tests }
RBTransformationsTest >> testRenameTemporaryTransform [

	| transformation class |
	transformation := (RBAddMethodTransformation
		                   sourceCode: 'foo
									| temp bar |
									bar := 5.
									temp := bar * bar.
									Transcript show: temp printString; cr.
									^temp * temp'
		                   in: self changeMockClass name
		                   withProtocol: #accessing ) primitiveExecute.

	transformation := (RBRenameTemporaryVariableTransformation
		                   model: transformation model
		                   rename: #temp
		                   to: #temp2
		                   in: self changeMockClass name
		                   selector: #foo) primitiveExecute.

	self assert: transformation model changes changes size equals: 2.

	class := transformation model classNamed: self changeMockClass name.
	self assert: (class directlyDefinesMethod: #foo).
	self
		assert: (class parseTreeForSelector: #foo) temporaries size
		equals: 2.
	self assert:
		((class parseTreeForSelector: #foo) temporaries anySatisfy: [ :e |
			 e name = #temp2 ])
]

{ #category : #tests }
RBTransformationsTest >> testRenameVariableTransform [

	| transformation class |
	transformation := (RBRenameVariableTransformation
		                   rename: 'classBlock'
		                   to: 'asdf'
		                   in: #RBBasicLintRuleTestData
		                   classVariable: false) primitiveExecute.

	class := transformation model classNamed: #RBBasicLintRuleTestData.
	self assert: (class directlyDefinesInstanceVariable: 'asdf').
	self deny: (class directlyDefinesInstanceVariable: 'classBlock').
	self
		assert: (class parseTreeForSelector: #checkClass:)
		equals: (self parseMethod: 'checkClass: aSmalllintContext
					^asdf value: aSmalllintContext value: result').
	self
		assert: (class parseTreeForSelector: #initialize)
		equals: (self parseMethod: 'initialize
					super initialize.
					self anInstVar: 1.
					asdf := [:context :aResult | ].
					methodBlock := [:context :aResult | ].
					self resultClass: RBSelectorEnvironment')
]
