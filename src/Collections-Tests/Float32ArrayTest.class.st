"
These tests are used to assert that FloatArrayPlugin has same results as Float asIEEE32BitWord
"
Class {
	#name : #Float32ArrayTest,
	#superclass : #CollectionRootTest,
	#traits : 'TCreationWithTest + TSequencedStructuralEqualityTest + TSequencedConcatenationTest + TSetArithmetic + TAsStringCommaAndDelimiterSequenceableTest + TPrintOnSequencedTest + TBeginsEndsWith + TCloneTest + (TConvertTest - {#testAsByteArray. #integerCollectionWithoutEqualElements}) + TConvertAsSortedTest + (TConvertAsSetForMultiplinessIdentityTest - {#testAsIdentitySetWithEqualsElements. #testAsIdentitySetWithIdentityEqualsElements. #testAsIdentitySetWithoutIdentityEqualsElements. #test0FixtureAsSetForIdentityMultiplinessTest}) + TCopyPartOfSequenceable + TCopyPartOfSequenceableForMultipliness + TCopySequenceableSameContents + TCopySequenceableWithOrWithoutSpecificElements + TCopySequenceableWithReplacement + TCopyTest + (TIncludesWithIdentityCheckTest - {#testIdentityIncludesNonSpecificComportement. #testIdentityIncludes. #test0FixtureIncludeWithIdentityTest}) + (TIndexAccess - {#testIdentityIndexOf. #testIdentityIndexOfIAbsent}) + (TIndexAccessForMultipliness - {#testIdentityIndexOfIAbsentDuplicate. #testIdentityIndexOfDuplicate}) + TIterateSequencedReadableTest + TPutTest + TPutBasicTest + TReplacementSequencedTest + TSequencedElementAccessTest + TSortTest + TSubCollectionAccess',
	#classTraits : 'TCreationWithTest classTrait + TSequencedStructuralEqualityTest classTrait + TSequencedConcatenationTest classTrait + TSetArithmetic classTrait + TAsStringCommaAndDelimiterSequenceableTest classTrait + TPrintOnSequencedTest classTrait + TBeginsEndsWith classTrait + TCloneTest classTrait + TConvertTest classTrait + TConvertAsSortedTest classTrait + TConvertAsSetForMultiplinessIdentityTest classTrait + TCopyPartOfSequenceable classTrait + TCopyPartOfSequenceableForMultipliness classTrait + TCopySequenceableSameContents classTrait + TCopySequenceableWithOrWithoutSpecificElements classTrait + TCopySequenceableWithReplacement classTrait + TCopyTest classTrait + TIncludesWithIdentityCheckTest classTrait + TIndexAccess classTrait + TIndexAccessForMultipliness classTrait + TIterateSequencedReadableTest classTrait + TPutTest classTrait + TPutBasicTest classTrait + TReplacementSequencedTest classTrait + TSequencedElementAccessTest classTrait + TSortTest classTrait + TSubCollectionAccess classTrait',
	#instVars : [
		'nonEmpty5ElementsNoDuplicate',
		'empty',
		'elementNotIn',
		'elementTwiceIn',
		'collectionWithEqualElements',
		'nonEmpty1Element',
		'collectionWithSameAtEndAndBegining',
		'collectionWith1TimeSubcollection',
		'collectionWith2TimeSubcollection',
		'collectionNotIncluded',
		'nonEmptySubcollection',
		'elementInNonEmpty',
		'replacementCollectionSameSize',
		'sortedCollection'
	],
	#category : #'Collections-Tests-Arrayed'
}

{ #category : #requirements }
Float32ArrayTest >> aValue [
" return a value to put into nonEmpty"
	^ elementNotIn
]

{ #category : #requirements }
Float32ArrayTest >> anIndex [
" return an index in nonEmpty bounds"
	^ 2
]

{ #category : #requirements }
Float32ArrayTest >> anotherElementNotIn [
" return an element different of 'elementNotIn'  not included in 'nonEmpty' "
	^ elementNotIn
]

{ #category : #requirements }
Float32ArrayTest >> anotherElementOrAssociationIn [
	" return an element (or an association for Dictionary ) present  in 'collection' "
	^ self collection anyOne
]

{ #category : #requirements }
Float32ArrayTest >> anotherElementOrAssociationNotIn [
	" return an element (or an association for Dictionary )not present  in 'collection' "
	^ elementNotIn
]

{ #category : #requirements }
Float32ArrayTest >> anotherValue [
" return a value ( not eual to 'aValue' ) to put into nonEmpty "
	^ elementInNonEmpty
]

{ #category : #coverage }
Float32ArrayTest >> classToBeTested [

	^ Float32Array
]

{ #category : #requirements }
Float32ArrayTest >> collection [

	^ nonEmpty5ElementsNoDuplicate
]

{ #category : #requirements }
Float32ArrayTest >> collectionClass [
	"Return the class to be used to create instances of the class tested"

	^ Float32Array
]

{ #category : #requirements }
Float32ArrayTest >> collectionMoreThan1NoDuplicates [
	" return a collection of size > 1 without equal elements"
	^ nonEmpty5ElementsNoDuplicate
]

{ #category : #requirements }
Float32ArrayTest >> collectionMoreThan5Elements [
" return a collection including at least 5 elements"

	^ nonEmpty5ElementsNoDuplicate
]

{ #category : #requirements }
Float32ArrayTest >> collectionNotIncluded [
" return a collection for wich each element is not included in 'nonEmpty' "
	^ collectionNotIncluded
		ifNil: [ collectionNotIncluded := (Float32Array new: 2) at:1 put: elementNotIn ; at: 2 put: elementNotIn  ; yourself ]
]

{ #category : #requirements }
Float32ArrayTest >> collectionWith1TimeSubcollection [
" return a collection including 'oldSubCollection'  only one time "
	^ collectionWith1TimeSubcollection ifNil: [ collectionWith1TimeSubcollection := collectionWithSameAtEndAndBegining  , self oldSubCollection , collectionWithSameAtEndAndBegining  ]
]

{ #category : #requirements }
Float32ArrayTest >> collectionWith2TimeSubcollection [
" return a collection including 'oldSubCollection'  two or many time "
	^ collectionWith2TimeSubcollection ifNil: [ collectionWith2TimeSubcollection := self collectionWith1TimeSubcollection, self oldSubCollection  ]
]

{ #category : #requirements }
Float32ArrayTest >> collectionWithCopyNonIdentical [
	" return a collection that include elements for which 'copy' return a different object (this is not the case of SmallInteger)"
	^ nonEmpty5ElementsNoDuplicate
]

{ #category : #requirements }
Float32ArrayTest >> collectionWithElementsToRemove [
" return a collection of elements included in 'nonEmpty'  "
	^ nonEmptySubcollection
	ifNil: [ nonEmptySubcollection := (Float32Array new:2 ) at:1 put: self nonEmpty first ; at:2 put: self nonEmpty last ; yourself ]
]

{ #category : #requirements }
Float32ArrayTest >> collectionWithNonIdentitySameAtEndAndBegining [
	" return a collection with elements at end and begining equals only with classic equality (they are not the same object).
(others elements of the collection are not equal to those elements)"
	^ collectionWithSameAtEndAndBegining
]

{ #category : #requirements }
Float32ArrayTest >> collectionWithSameAtEndAndBegining [
" return a collection with elements at end and begining equals .
(others elements of the collection are not equal to those elements)"
	^ collectionWithSameAtEndAndBegining
]

{ #category : #requirements }
Float32ArrayTest >> collectionWithSortableElements [
" return a collection elements that can be sorte ( understanding message ' < '  or ' > ')"
	^ nonEmpty5ElementsNoDuplicate
]

{ #category : #requirements }
Float32ArrayTest >> collectionWithoutEqualElements [

" return a collection not including equal elements "
	^ nonEmpty5ElementsNoDuplicate
]

{ #category : #requirements }
Float32ArrayTest >> collectionWithoutNilElements [
" return a collection that doesn't includes a nil element  and that doesn't includes equal elements'"
	^ nonEmpty5ElementsNoDuplicate
]

{ #category : #requirements }
Float32ArrayTest >> elementInForElementAccessing [
" return an element inculded in 'moreThan4Elements'"
	^ elementInNonEmpty
]

{ #category : #requirements }
Float32ArrayTest >> elementInForIndexAccessing [
" return an element included in 'collectionMoreThan1NoDuplicates' "
	^ elementInNonEmpty
]

{ #category : #requirements }
Float32ArrayTest >> elementNotIn [
"return an element not included in 'nonEmpty' "

	^ elementNotIn
]

{ #category : #requirements }
Float32ArrayTest >> elementNotInForElementAccessing [
" return an element not included in 'moreThan4Elements' "
	^ elementNotIn
]

{ #category : #requirements }
Float32ArrayTest >> elementNotInForIndexAccessing [
" return an element not included in 'collectionMoreThan1NoDuplicates' "
	^ elementNotIn
]

{ #category : #requirements }
Float32ArrayTest >> elementToAdd [
" return an element of type 'nonEmpy' elements'type'  not  yet included in nonEmpty"
	^ elementNotIn
]

{ #category : #requirements }
Float32ArrayTest >> elementsCopyNonIdenticalWithoutEqualElements [
	" return a collection that does niot incllude equal elements ( classic equality )
	all elements included are elements for which copy is not identical to the element  "
	^ nonEmpty5ElementsNoDuplicate
]

{ #category : #requirements }
Float32ArrayTest >> empty [
	^ empty
]

{ #category : #requirements }
Float32ArrayTest >> firstCollection [
" return a collection that will be the first part of the concatenation"
	^ nonEmpty5ElementsNoDuplicate
]

{ #category : #requirements }
Float32ArrayTest >> firstIndex [
" return an index between 'nonEmpty' bounds that is < to 'second index' "
	^2
]

{ #category : #requirements }
Float32ArrayTest >> indexArray [
" return a Collection including indexes between bounds of 'nonEmpty' "

	^ { 1. 4. 3.}
]

{ #category : #requirements }
Float32ArrayTest >> indexInForCollectionWithoutDuplicates [
" return an index between 'collectionWithoutEqualsElements'  bounds"
	^ 2
]

{ #category : #requirements }
Float32ArrayTest >> indexInNonEmpty [
	"Return an index between bounds of 'nonEmpty'"

	^ 3
]

{ #category : #requirements }
Float32ArrayTest >> moreThan3Elements [
	" return a collection including atLeast 3 elements"
	^ nonEmpty5ElementsNoDuplicate
]

{ #category : #requirements }
Float32ArrayTest >> moreThan4Elements [

" return a collection including at leat 4 elements"
	^ nonEmpty5ElementsNoDuplicate
]

{ #category : #requirements }
Float32ArrayTest >> newElement [
"return an element that will be put in the collection in place of another"
	^ elementNotIn
]

{ #category : #requirements }
Float32ArrayTest >> nonEmpty [

	^ nonEmpty5ElementsNoDuplicate
]

{ #category : #requirements }
Float32ArrayTest >> nonEmpty1Element [
" return a collection of size 1 including one element"
	^ nonEmpty1Element
]

{ #category : #requirements }
Float32ArrayTest >> nonEmptyMoreThan1Element [
" return a collection that doesn't includes equal elements' and doesn't include nil elements'"
	^nonEmpty5ElementsNoDuplicate
]

{ #category : #requirements }
Float32ArrayTest >> oldSubCollection [
" return a subCollection included in collectionWith1TimeSubcollection .
ex :   subCollection := #( 2 3 4) and collectionWith1TimeSubcollection := #(1 2 3 4 5)"
	^ nonEmpty5ElementsNoDuplicate
]

{ #category : #requirements }
Float32ArrayTest >> replacementCollection [
" return a collection that will be used to replace 'oldSubcollection' in ' collectionWith1TimeSubcollection'  "
	^ collectionWithSameAtEndAndBegining
]

{ #category : #requirements }
Float32ArrayTest >> replacementCollectionSameSize [
" return a collection of size (secondIndex - firstIndex + 1)"
	^replacementCollectionSameSize
		ifNil: [ 	replacementCollectionSameSize := Float32Array new: (self secondIndex  - self firstIndex  + 1).
				 1 to: replacementCollectionSameSize size do:
					[ :i | replacementCollectionSameSize at:i put: elementInNonEmpty ].
				replacementCollectionSameSize.
				 ]
]

{ #category : #requirements }
Float32ArrayTest >> secondCollection [
" return a collection that will be the second part of the concatenation"
	^ collectionWithEqualElements
]

{ #category : #requirements }
Float32ArrayTest >> secondIndex [
" return an index between 'nonEmpty' bounds that is > to 'first index' "
	^self firstIndex +1
]

{ #category : #running }
Float32ArrayTest >> setUp [
	super setUp.
	empty := Float32Array new.
	elementInNonEmpty := 7.0.
	nonEmpty5ElementsNoDuplicate := (Float32Array new: 5)
		at: 1 put: 1.5;
		at: 2 put: 2.5;
		at: 3 put: elementInNonEmpty;
		at: 4 put: 4.5;
		at: 5 put: 5.5;
		yourself.
	elementNotIn := 999.0.
	elementTwiceIn := 2.3.
	collectionWithEqualElements := (Float32Array new: 3)
		at: 1 put: 2.0;
		at: 2 put: 2.0;
		at: 3 put: 3.5;
		yourself.
	nonEmpty1Element := (Float32Array new: 1)
		at: 1 put: 1.2;
		yourself.
	collectionWithSameAtEndAndBegining := (Float32Array new: 3)
		at: 1 put: 2.0;
		at: 2 put: 1.0;
		at: 3 put: 2.0 copy;
		yourself
]

{ #category : #requirements }
Float32ArrayTest >> sizeCollection [
	"Answers a collection not empty"
	^ nonEmpty5ElementsNoDuplicate
]

{ #category : #requirements }
Float32ArrayTest >> sortedInAscendingOrderCollection [
	"Return a collection sorted in ascending order"
	^ sortedCollection ifNil: [ sortedCollection := ( Float32Array new: 3)at: 1 put: 1.0 ; at: 2 put: 2.0 ; at: 3 put: 3.0 ; yourself ]
]

{ #category : #requirements }
Float32ArrayTest >> subCollectionNotIn [
" return a collection for which at least one element is not included in 'moreThan4Elements' "
	^ collectionNotIncluded
		ifNil: [ collectionNotIncluded := (Float32Array new: 2) at:1 put: elementNotIn ; at: 2 put: elementNotIn  ; yourself ]
]

{ #category : #'tests - arithmetic' }
Float32ArrayTest >> testAddNoMutation [
	"this test checks that addition does not impact the orginal arrays"

	| a b c |
	a := { 1.2. 2.3 } asFloatArray.
	b := { 1.2. 2.3 } asFloatArray.
	c := a + b.
	self assert: a equals: { 1.2. 2.3 } asFloatArray.
	self assert: b equals: { 1.2. 2.3 } asFloatArray
]

{ #category : #'tests - arithmetic' }
Float32ArrayTest >> testArithmeticCoercion [
	"This test is related to http://bugs.squeak.org/view.php?id=6782"

	self assert: 3.0 / (Float32Array with: 2.0) equals: (Float32Array with: 1.5).
	self assert: 3.0 * (Float32Array with: 2.0) equals: (Float32Array with: 6.0).
	self assert: 3.0 + (Float32Array with: 2.0) equals: (Float32Array with: 5.0).
	self assert: 3.0 - (Float32Array with: 2.0) equals: (Float32Array with: 1.0).
	self assert: 3.0 / (Float32Array with: 2.0) equals: (Float32Array with: 1.5).
	self assert: 3.0 * (Float32Array with: 2.0) equals: (Float32Array with: 6.0).
	self assert: 3.0 + (Float32Array with: 2.0) equals: (Float32Array with: 5.0).
	self assert: 3.0 - (Float32Array with: 2.0) equals: (Float32Array with: 1.0)
]

{ #category : #'tests - arithmetic' }
Float32ArrayTest >> testDotProduct [
	| a b |
	a := #(2.0 3.0 4.0 5.0) asFloatArray.
	b := #(2.0 3.0 4.0 5.0) asFloatArray.
	self assert: (a dot: b) equals: 54
]

{ #category : #testing }
Float32ArrayTest >> testFloatArrayPluginPrimitiveAt [
	"if FloatArrayPlugin primitive are not here, this test is dumb.
	Otherwise, it will compare primitive and #fromIEEE32Bit:"

	#(2r0.0 2r1.0 2r1.1 2r1.00000000000000000000001 2r1.0e-10 2r1.1e-10 2r1.00000000000000000000001e-10 2r1.0e10 2r1.1e10 2r1.00000000000000000000001e10 2r1.0e-126 2r1.11111111111111111111111e127 2r1.11111111111111111111111e128 2r0.11111111111111111111111e-126 2r0.00000000000000000000001e-126 2r1.0000000000000000000000001 2r1.0000000000000000000000010 2r1.0000000000000000000000011 2r1.0000000000000000000000100 2r1.0000000000000000000000101 2r1.0000000000000000000000110 2r1.0000000000000000000000111 2r1.1111111111111111111111001 2r1.1111111111111111111111010 2r1.1111111111111111111111011 2r1.1111111111111111111111101 2r1.1111111111111111111111110 2r1.1111111111111111111111111 2r1.1111111111111111111111110e127 2r0.1111111111111111111111111e-126 2r0.1111111111111111111111110e-126 2r0.1111111111111111111111101e-126 2r0.1111111111111111111111011e-126 2r0.1111111111111111111111010e-126 2r0.1111111111111111111111001e-126 2r0.0000000000000000000000111e-126 2r0.0000000000000000000000110e-126 2r0.0000000000000000000000101e-126 2r0.0000000000000000000000011e-126 2r0.0000000000000000000000010e-126 2r0.0000000000000000000000001e-126 2r0.0000000000000000000000010000000000000000000000000001e-126)
		do: [ :e |
			self assert: ((Float32Array with: e) at: 1) equals: (Float fromIEEE32Bit: ((Float32Array with: e) basicAt: 1)).
			self assert: ((Float32Array with: e negated) at: 1) equals: (Float fromIEEE32Bit: ((Float32Array with: e negated) basicAt: 1)) ].
	"regular numbers no truncation or rounding"

	"smallest float32 before gradual underflow"

	"biggest float32"

	"overflow"

	"gradual underflow"

	"with rounding mode : tests on 25 bits"

	"overflow"

	"gradual underflow"

	"special cases"
	(Array with: Float infinity with: Float infinity negated with: Float negativeZero)
		do: [ :e | self assert: ((Float32Array with: e) at: 1) equals: (Float fromIEEE32Bit: ((Float32Array with: e) basicAt: 1)) ].

	"Cannot compare NaN"
	(Array with: Float nan) do: [ :e | self assert: (Float fromIEEE32Bit: ((Float32Array with: e) basicAt: 1)) isNaN ]
]

{ #category : #testing }
Float32ArrayTest >> testFloatArrayPluginPrimitiveAtPut [
	"if FloatArrayPlugin primitive are not here, this test is dumb.
	Otherwise, it will compare primitive and #asIEEE32BitWord"

	#(2r0.0 2r1.0 2r1.1 2r1.00000000000000000000001 2r1.0e-10 2r1.1e-10 2r1.00000000000000000000001e-10 2r1.0e10 2r1.1e10 2r1.00000000000000000000001e10 2r1.0e-126 2r1.11111111111111111111111e127 2r1.11111111111111111111111e128 2r0.11111111111111111111111e-126 2r0.00000000000000000000001e-126 2r1.0000000000000000000000001 2r1.0000000000000000000000010 2r1.0000000000000000000000011 2r1.0000000000000000000000100 2r1.0000000000000000000000101 2r1.0000000000000000000000110 2r1.0000000000000000000000111 2r1.1111111111111111111111001 2r1.1111111111111111111111010 2r1.1111111111111111111111011 2r1.1111111111111111111111101 2r1.1111111111111111111111110 2r1.1111111111111111111111111 2r1.1111111111111111111111110e127 2r0.1111111111111111111111111e-126 2r0.1111111111111111111111110e-126 2r0.1111111111111111111111101e-126 2r0.1111111111111111111111011e-126 2r0.1111111111111111111111010e-126 2r0.1111111111111111111111001e-126 2r0.0000000000000000000000111e-126 2r0.0000000000000000000000110e-126 2r0.0000000000000000000000101e-126 2r0.0000000000000000000000011e-126 2r0.0000000000000000000000010e-126 2r0.0000000000000000000000001e-126 2r0.0000000000000000000000010000000000000000000000000001e-126)
		do: [ :e |
			self assert: ((Float32Array with: e) basicAt: 1) equals: e asIEEE32BitWord.
			self assert: ((Float32Array with: e negated) basicAt: 1) equals: e negated asIEEE32BitWord ].
	"regular numbers no truncation or rounding"

	"smallest float32 before gradual underflow"

	"biggest float32"

	"overflow"

	"gradual underflow"

	"with rounding mode : tests on 25 bits"

	"overflow"

	"gradual underflow"

	"special cases"
	(Array
		with: Float infinity
		with: Float infinity negated
		with: Float negativeZero
		with: Float nan) do: [ :e | self assert: ((Float32Array with: e) basicAt: 1) equals: e asIEEE32BitWord ]
]

{ #category : #tests }
Float32ArrayTest >> testSumWithFloatScalar [
	| floatArray scalar expectedResult actualResult |

	floatArray := #(1 2) asFloatArray.
	scalar := 0.1.

	expectedResult := #(1.1 2.1) asFloatArray.
	actualResult := floatArray + scalar.

	self assert: actualResult equals: expectedResult
]

{ #category : #tests }
Float32ArrayTest >> testSumWithIntegerArray [
	| floatArray integerArray expectedResult actualResult |

	floatArray := #(1 2) asFloatArray.
	integerArray := #(3 4) asIntegerArray.

	expectedResult := #(4 6) asFloatArray.
	actualResult := floatArray + integerArray.

	self assert: actualResult equals: expectedResult
]

{ #category : #tests }
Float32ArrayTest >> testSumWithIntegerScalar [
	| floatArray scalar expectedResult actualResult |

	floatArray := #(1 2) asFloatArray.
	scalar := 3.

	expectedResult := #(4 5) asFloatArray.
	actualResult := floatArray + scalar.

	self assert: actualResult equals: expectedResult
]

{ #category : #tests }
Float32ArrayTest >> testSumWithOrderedCollection [
	| floatArray collection expectedResult actualResult |

	floatArray := #(1 2) asFloatArray.
	collection := #(3 4) asOrderedCollection.

	expectedResult := #(4 6) asFloatArray.
	actualResult := floatArray + collection.

	self assert: actualResult equals: expectedResult
]

{ #category : #requirements }
Float32ArrayTest >> unsortedCollection [
" retur a collection that is not yat sorted"
	^nonEmpty5ElementsNoDuplicate
]

{ #category : #requirements }
Float32ArrayTest >> withEqualElements [
	^ collectionWithEqualElements
]
