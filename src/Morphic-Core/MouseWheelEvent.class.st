"
A mouse event generated by intercepting the keyboard events (ctrl+up/down arrow) generated by the VM in response to mouse wheel activity.
"
Class {
	#name : 'MouseWheelEvent',
	#superclass : 'MouseEvent',
	#instVars : [
		'direction'
	],
	#category : 'Morphic-Core-Events',
	#package : 'Morphic-Core',
	#tag : 'Events'
}

{ #category : 'instance creation' }
MouseWheelEvent class >> fromCharacter: aCharacter position: aPoint buttons: evtButtons hand: evtHand stamp: stamp [

	^ self new
		setType: #mouseWheel
		position: aPoint
		direction: aCharacter
		buttons: evtButtons
		hand: evtHand
		stamp: stamp
]

{ #category : 'accessing' }
MouseWheelEvent >> direction [
	"Answer the value of direction"

	^ direction
]

{ #category : 'accessing' }
MouseWheelEvent >> direction: anObject [
	"Set the value of direction"

	direction := anObject
]

{ #category : 'testing' }
MouseWheelEvent >> isDown [

	^ direction = Character arrowDown
]

{ #category : 'testing' }
MouseWheelEvent >> isLeft [

	^ direction = Character arrowLeft
]

{ #category : 'testing' }
MouseWheelEvent >> isMouseWheel [
	"Answer whether the receiver is a mouse wheel event."

	^true
]

{ #category : 'testing' }
MouseWheelEvent >> isRight [

	^ direction = Character arrowRight
]

{ #category : 'testing' }
MouseWheelEvent >> isUp [

	^ direction = Character arrowUp
]

{ #category : 'printing' }
MouseWheelEvent >> printOn: aStream [

	aStream nextPut: $[.
	aStream print: self cursorPoint; space.
	aStream nextPutAll: type; space.
	aStream print: self direction; space.
	aStream nextPutAll: self modifierString.
	aStream nextPutAll: self buttonString.
	aStream print: timeStamp; space.
	aStream print: self windowIndex.
	aStream nextPut: $]
]

{ #category : 'dispatching' }
MouseWheelEvent >> sentTo: anObject [
	"Dispatch the receiver into anObject"

	type == #mouseWheel ifTrue:[^anObject handleMouseWheel: self].
	^super sentTo: anObject
]

{ #category : 'accessing' }
MouseWheelEvent >> setType: evtType position: evtPos direction: dirSymbol buttons: evtButtons hand: evtHand stamp: stamp [
	"Set the state for the receiver."

	type := evtType.
	position := evtPos.
	buttons := evtButtons.
	source := evtHand.
	wasHandled := false.
	direction := dirSymbol.
	timeStamp := stamp
]
