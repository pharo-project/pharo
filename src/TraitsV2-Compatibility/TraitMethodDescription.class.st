"
Used by Trait to encapsulates a collection of methods for one particular selector when querying for changes. According to the number and kind of those methods a provided method exists, there is a conflict or there are no provided nor conflicting methods at all. I provide the interface to query for those situations, e.g., effectiveMethod returns the provided method or the conflict marker method.

"
Class {
	#name : 'TraitMethodDescription',
	#superclass : 'Object',
	#instVars : [
		'selector',
		'locatedMethods'
	],
	#category : 'TraitsV2-Compatibility-Composition',
	#package : 'TraitsV2-Compatibility',
	#tag : 'Composition'
}

{ #category : 'private' }
TraitMethodDescription class >> maxArguments [
	^30
]

{ #category : 'instance creation' }
TraitMethodDescription class >> new [
	^super new
		initialize;
		yourself
]

{ #category : 'instance creation' }
TraitMethodDescription class >> selector: aSymbol [
	^self new
		selector: aSymbol
		yourself
]

{ #category : 'accessing' }
TraitMethodDescription >> addLocatedMethod: aLocatedMethod [
	locatedMethods add: aLocatedMethod
]

{ #category : 'accessing' }
TraitMethodDescription >> conflictMethod [
	| binary numberOfArguments |
	self isConflict ifFalse: [^nil].
	binary := self isBinarySelector.
	numberOfArguments := self numberOfArguments.

	^self
		generateMethod: self selector
		withMarker: CompiledMethod conflictMarker
		forArgs: numberOfArguments
		binary: binary
]

{ #category : 'private' }
TraitMethodDescription >> generateMethod: aSelector withMarker: aSymbol forArgs: aNumber binary: aBoolean [
	| source keywords method |
	source := String streamContents: [:stream |
		aNumber < 1
			ifTrue: [stream nextPutAll: aSelector]
			ifFalse: [aBoolean
				ifTrue: [
					stream nextPutAll: aSelector; space; nextPutAll: 'anObject']
				ifFalse: [
					keywords := aSelector keywords.
					1 to: aNumber do: [:argumentNumber |
						stream
							nextPutAll: (keywords at: argumentNumber); space;
							nextPutAll: 'arg'; nextPutAll: argumentNumber asString; space]]].
		stream cr; tab; nextPutAll: 'self '; nextPutAll: aSymbol].

	method := self class compiler
		source: source;
		class: self class;
		permitFaulty;
		compile.
	^method selector: aSelector; yourself
]

{ #category : 'initialization' }
TraitMethodDescription >> initialize [
	super initialize.
	locatedMethods := IdentitySet new
]

{ #category : 'testing' }
TraitMethodDescription >> isAliasSelector [
	"Return true if the selector is an alias (if it is different
	from the original selector) or already an aliased method
	in the original location (recursively search the compositions).
	Return false, if not or if we have a conflict."

	| locatedMethod |
	^self size = 1 and: [
		locatedMethod := self locatedMethods anyOne.
		(locatedMethod selector ~= self selector) or: [
			locatedMethod methodClass isAliasSelector: self selector]]
]

{ #category : 'testing' }
TraitMethodDescription >> isBinarySelector [
	^self locatedMethods anyOne
		isBinarySelector
]

{ #category : 'testing' }
TraitMethodDescription >> isConflict [
	| count originMethodReferenciel |
	count := 0.

	self locatedMethods size > 1
		ifTrue:
			["If they are more than 1 located method, then check whether these methods have the same origin"
			originMethodReferenciel := self locatedMethods anyOne  origin.
			(self locatedMethods allSatisfy: [:each | each origin == originMethodReferenciel])
				ifTrue: [ ^ false ]].

	self methodsDo: [:each |
		each isProvided ifTrue: [
			count := count + 1.
			count > 1 ifTrue: [^true]]].
	^false
]

{ #category : 'testing' }
TraitMethodDescription >> isEmpty [
	^self size = 0
]

{ #category : 'testing' }
TraitMethodDescription >> isLocalAliasSelector [
	"Return true if the selector is an alias (if it is different
	from the original selector). Return false, if not or if we
	have a conflict."

	^self size = 1 and: [
		(self locatedMethods anyOne selector ~= self selector)]
]

{ #category : 'testing' }
TraitMethodDescription >> isNotEmpty [
	^self size > 0
]

{ #category : 'testing' }
TraitMethodDescription >> isProvided [
	^ self providedMethod notNil
]

{ #category : 'testing' }
TraitMethodDescription >> isRequired [
	self isEmpty ifTrue: [^ false].
	^ self locatedMethods allSatisfy: [:each | each isRequired]
]

{ #category : 'accessing' }
TraitMethodDescription >> locatedMethods [
	^locatedMethods
]

{ #category : 'enumeration' }
TraitMethodDescription >> methodsDo: aBlock [
	self locatedMethods do: [:each |
		aBlock value: each ]
]

{ #category : 'private' }
TraitMethodDescription >> numberOfArguments [
	^ self locatedMethods anyOne selector numArgs
]

{ #category : 'accessing' }
TraitMethodDescription >> providedLocatedMethod [

	| locatedMethod aLocatedMethod refOrigin |

	locatedMethod := nil.
	self locatedMethods ifEmpty: [ ^ nil ].

	self locatedMethods size > 1
		ifTrue: [ aLocatedMethod := self locatedMethods anyOne.
			refOrigin := ( aLocatedMethod methodClass >> aLocatedMethod selector ) origin.
			( self locatedMethods allSatisfy: [ :each | each origin == refOrigin ] )
				ifTrue: [ ^ aLocatedMethod ]
			].

	self locatedMethods
		do: [ :each |
			each isProvided
				ifTrue: [ locatedMethod ifNotNil: [ ^ nil ].
					locatedMethod := each
					]
			].
	^ locatedMethod
]

{ #category : 'accessing' }
TraitMethodDescription >> providedMethod [
	^self providedLocatedMethod ifNotNil: [:locatedMethod | locatedMethod method]
]

{ #category : 'accessing' }
TraitMethodDescription >> selector [
	^selector
]

{ #category : 'accessing' }
TraitMethodDescription >> selector: aSymbol [
	selector := aSymbol
]

{ #category : 'accessing' }
TraitMethodDescription >> size [
	^self locatedMethods size
]
