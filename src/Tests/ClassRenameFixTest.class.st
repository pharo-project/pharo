Class {
	#name : #ClassRenameFixTest,
	#superclass : #AbstractEnvironmentTestCase,
	#instVars : [
		'previousChangeSet',
		'testsChangeSet',
		'newClassName',
		'originalName'
	],
	#category : #'Tests-System'
}

{ #category : #private }
ClassRenameFixTest >> newUniqueClassName [
	"Return a class name that is not used in the system."

	"self new newClassName"

	| baseName newName |
	baseName := 'AutoGeneratedClassForTestingSystemChanges'.
	1 to: 9999
		do:
			[:number |
			newName := baseName , number printString.
			(Smalltalk hasClassNamed: newName) ifFalse: [^newName asSymbol]].
	^self
		error: 'Can no longer find a new and unique class name for the SystemChangeTest !'
]

{ #category : #private }
ClassRenameFixTest >> removeEverythingInSetFromSystem: aChangeSet [

	aChangeSet changedMessageList
		do: [:methodRef | methodRef actualClass removeSelector: methodRef selector].
	aChangeSet changedClasses
		do: [:each | each isMeta
				ifFalse: [each removeFromSystemUnlogged]]
]

{ #category : #tests }
ClassRenameFixTest >> renameClassUsing: aBlock [
	| createdClass foundClasses |
	originalName := self newUniqueClassName.

	createdClass := self class classInstaller make: [ :aBuilder |
		aBuilder name: originalName;
		package: 'ClassRenameFix-GeneradClass' ].

	newClassName := self newUniqueClassName.
	aBlock value: createdClass value: newClassName.
	self assert: (testingEnvironment classNamed: originalName) isNil.
	self assert: (testingEnvironment classNamed: newClassName) notNil.
	foundClasses := testingEnvironment organization listAtCategoryNamed: 'ClassRenameFix-GeneradClass'.
	self assert: foundClasses notEmpty.
	self assert: (foundClasses includes: newClassName).
	self assert: createdClass name equals: newClassName
]

{ #category : #running }
ClassRenameFixTest >> setUp [
	super setUp.
	previousChangeSet := ChangeSet current.
	testsChangeSet := ChangeSet new.
	ChangeSet newChanges: testsChangeSet.
	SystemAnnouncer uniqueInstance weak
		when: ClassRenamed
		send: #verifyRenameEvent:
		to: self.
	super setUp
]

{ #category : #running }
ClassRenameFixTest >> tearDown [

	self removeEverythingInSetFromSystem: testsChangeSet.
	ChangeSet newChanges: previousChangeSet.
	ChangeSet removeChangeSet: testsChangeSet.
	previousChangeSet := nil.
	testsChangeSet := nil.
	SystemAnnouncer uniqueInstance unsubscribe: self.
	super tearDown
]

{ #category : #tests }
ClassRenameFixTest >> testRenameClassUsingClass [

	self renameClassUsing: [:class :newName | class rename: newName]
]

{ #category : #running }
ClassRenameFixTest >> verifyRenameEvent: aRenamedEvent [
	| renamedClass |
	renamedClass := aRenamedEvent classRenamed.
	self assert: (testingEnvironment classNamed: newClassName) name equals: newClassName.
	self assert: renamedClass name equals: newClassName
]
