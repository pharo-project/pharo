"
CompilerTest is a holder for SUnit test of Compiler
"
Class {
	#name : #OCCompilerTest,
	#superclass : #AbstractEnvironmentTestCase,
	#instVars : [
		'errorMessage',
		'errorLocation',
		'errorSource',
		'text',
		'interactive'
	],
	#category : #'OpalCompiler-Tests-FromOld'
}

{ #category : #running }
OCCompilerTest >> compile [
	^ self compileWithFailBlock: [^ nil]
]

{ #category : #running }
OCCompilerTest >> compileWithFailBlock: aBlock [
	^ OpalCompiler new
		source: text;
		class: MockForCompilation;
		requestor: self;
		failBlock: aBlock;
		compile
]

{ #category : #mocking }
OCCompilerTest >> initializeErrorMessage [
	errorMessage := nil.
	errorLocation := nil.
	errorSource := nil
]

{ #category : #accessing }
OCCompilerTest >> interactive [

	^ interactive ifNil: [ true ]
]

{ #category : #mocking }
OCCompilerTest >> notify: aString at: aSmallInteger in: aReadStream [
	errorMessage := aString.
	errorLocation := aSmallInteger.
	errorSource := aReadStream
]

{ #category : #running }
OCCompilerTest >> runCase [
	SystemAnnouncer uniqueInstance suspendAllWhile: [ super runCase ]
]

{ #category : #running }
OCCompilerTest >> setUp [
	super setUp.
	testingEnvironment at: #OCCompilerTestTestVar put: MockForCompilation
]

{ #category : #running }
OCCompilerTest >> tearDown [
	testingEnvironment removeKey: #OCCompilerTestTestVar.
	super tearDown
]

{ #category : #utilities }
OCCompilerTest >> tempTraitShadowingString [

	^ 'testReplaceFromToWithStartingAt
	| result  repStart collection replacementCollection firstIndex secondIndex |
		replacementCollection := 1.'
]

{ #category : #'tests - readonly vars' }
OCCompilerTest >> testAssignmentOfClassNameBinding [
	self initializeErrorMessage.
	text := 'temp | | MockForCompilation := nil'.

	self
		compileWithFailBlock: [ self assert: errorMessage equals: 'Assignment to read-only variable ->'.
			self assert: errorLocation equals: 10.
			self assert: errorSource contents equals: 'temp | | MockForCompilation := nil'.
			^ nil ].
	self fail
]

{ #category : #'tests - readonly vars' }
OCCompilerTest >> testAssignmentOfGlobalVarBinding [
	self initializeErrorMessage.
	text := 'temp | | OCCompilerTestTestVar := 2'.
	self initializeErrorMessage.
	OpalCompiler new
		source: text;
		class: MockForCompilation;
		requestor: self;
		failBlock: [ self fail.
			^ nil ];
		compile
]

{ #category : #'tests - shadowing' }
OCCompilerTest >> testInBlockArgumentInstanceVariableShadowing [
	self initializeErrorMessage.
	text := 'temp [:var1 | ]'.

	self compile.

	self flag: 'display menu instead of going into failblock'.

	self assert: errorMessage equals: 'Name already defined ->'.
	self assert: errorLocation equals: 8.
	self assert: errorSource contents equals: 'temp [:var1 | ]'
]

{ #category : #'tests - shadowing' }
OCCompilerTest >> testInBlockTempArgumentShadowing [
	self initializeErrorMessage.
	text := 'temp [:temp | |temp|]'.

	self
		compileWithFailBlock: [ self assert: errorMessage equals: 'Name already defined ->'.
			self assert: errorLocation equals: 16.
			self assert: errorSource contents equals: 'temp [:temp | |temp|]'.
			^ nil ].
	self fail
]

{ #category : #'tests - shadowing' }
OCCompilerTest >> testInBlockTempInstanceVariableShadowing [
	self initializeErrorMessage.
	text := 'temp [:temp | |var1|]'.

	self
		compileWithFailBlock: [ self assert: errorMessage equals: 'Name already defined ->'.
			self assert: errorLocation equals: 16.
			self assert: errorSource contents equals: 'temp [:temp | |var1|]'.
			^ nil ].
	self fail
]

{ #category : #'tests - shadowing' }
OCCompilerTest >> testInBlockTempShadowing [
	self initializeErrorMessage.
	text := 'temp |var2| [:temp| |var2|]'.

	self
		compileWithFailBlock: [ self assert: errorMessage equals: 'Name already defined ->'.
			self assert: errorLocation equals: 22.
			self assert: errorSource contents equals: 'temp |var2| [:temp| |var2|]'.
			^ nil ].
	self fail
]

{ #category : #'tests - shadowing' }
OCCompilerTest >> testInstanceVariableShadowing [
	self initializeErrorMessage.
	text := 'var1 |var1|'.

	self
		compileWithFailBlock: [ self assert: errorMessage equals: 'Name already defined ->'.
			self assert: errorLocation equals: 7.
			self assert: errorSource contents equals: 'var1 |var1|'.
			^ nil ].
	self fail
]

{ #category : #literals }
OCCompilerTest >> testNegativeZero [
	self
		assert:
			(OpalCompiler new
				source: '-0.0';
				evaluate) hex
		equals: Float negativeZero hex
]

{ #category : #'tests - shadowing' }
OCCompilerTest >> testNoShadowing [
	self initializeErrorMessage.
	text := 'temp |var2|  var2:=1'.

	self compileWithFailBlock: [
		self fail.
		^nil ]
]

{ #category : #'tests - shadowing2' }
OCCompilerTest >> testNotInteractiveInBlockArgumentInstanceVariableShadowing [

	self initializeErrorMessage.
	interactive := false.
	self
		should: [
			OpalCompiler new
				source: 'temp [:var1 | ]';
				class: MockForCompilation;
				compile.
		]
		raise: OCShadowVariableWarning
		withExceptionDo: [ :ex |
			self
				assert: ex warningMessage
				equals: 'MockForCompilation>>temp(var1 is shadowed)'
		]
]

{ #category : #'tests - shadowing2' }
OCCompilerTest >> testNotInteractiveInBlockTempArgumentShadowing [

	self initializeErrorMessage.
	interactive := false.
	self
		should: [
			OpalCompiler new
				source: 'temp [:temp | |temp|]';
				class: MockForCompilation;
				requestor: self;
				compile.
		]
		raise: OCShadowVariableWarning
		withExceptionDo: [ :ex |
			self
				assert: ex warningMessage
				equals: 'MockForCompilation>>temp(temp is shadowed)'
		]
]

{ #category : #'tests - shadowing2' }
OCCompilerTest >> testNotInteractiveInBlockTempInstanceVariableShadowing [

	self initializeErrorMessage.
	interactive := false.
	self
		should: [
			OpalCompiler new
				source: 'temp [:temp | |var1|]';
				class: MockForCompilation;
				requestor: self;
				failBlock: [self fail. ^ nil];
				compile.
		]
		raise: OCShadowVariableWarning
		withExceptionDo: [ :ex |
			self
				assert: ex warningMessage
				equals: 'MockForCompilation>>temp(var1 is shadowed)'
		]
]

{ #category : #'tests - shadowing2' }
OCCompilerTest >> testNotInteractiveInBlockTempShadowing [

	self initializeErrorMessage.
	interactive := false.
	self
		should: [
			OpalCompiler new
				source: 'temp |var2| [:temp| |var2|]';
				class: MockForCompilation;
				requestor: self;
				failBlock: [self fail];
				compile.
		]
		raise: OCShadowVariableWarning
		withExceptionDo: [ :ex |
			self
				assert: ex warningMessage
				equals: 'MockForCompilation>>temp(var2 is shadowed)'
		]
]

{ #category : #'tests - shadowing2' }
OCCompilerTest >> testNotInteractiveNoShadowing [

	self initializeErrorMessage.
	interactive := false.
	self shouldnt: [
		OpalCompiler new
			source: 'temp |var2|';
			class: MockForCompilation;
			requestor: self;
			failBlock: [self fail. ^ nil ];
			compile.
	] raise: OCShadowVariableWarning
]

{ #category : #'tests - shadowing2' }
OCCompilerTest >> testNotInteractiveShadowingOfTemp [

	self initializeErrorMessage.
	interactive := false.
	self
		should: [
			OpalCompiler new
				source: 'temp |temp1 temp1| ';
				class: MockForCompilation;
				requestor: self;
				compile.
		]
		raise: OCShadowVariableWarning
		withExceptionDo: [ :ex |
			self
				assert: ex warningMessage
				equals: 'MockForCompilation>>temp(temp1 is shadowed)'
		]
]

{ #category : #'tests - shadowing2' }
OCCompilerTest >> testNotInteractiveSiblingBlocksInstanceVariableShadowing [

	self initializeErrorMessage.
	interactive := false.
	self
		should: [
			OpalCompiler new
				source: 'temp [:temp | ].[:temp | |var1|]';
				class:  MockForCompilation;
				requestor: self;
				failBlock: [self fail. ^ nil ];
				compile.
		]
		raise: OCShadowVariableWarning
		withExceptionDo: [ :ex |
			self
				assert: ex warningMessage
				equals: 'MockForCompilation>>temp(var1 is shadowed)'
		]
]

{ #category : #'tests - shadowing2' }
OCCompilerTest >> testNotInteractiveSiblingBlocksTempShadowing [

	self initializeErrorMessage.
	interactive := false.
	self shouldnt: [
		OpalCompiler new
			source: 'temp [:temp | ]. [:temp | ]';
			class: MockForCompilation;
			requestor: self;
			failBlock: [self fail. ^nil];
			compile
	] raise: OCShadowVariableWarning
]

{ #category : #'tests - shadowing' }
OCCompilerTest >> testReservedNameAsBlockArgumentShadowing [
	#('self' 'super' 'thisContext' 'true' 'false' 'nil')
		do: [ :each |
			self initializeErrorMessage.
			[ :exit |
			OpalCompiler new
				source: 'temp ^ [ :' , each , ' | ^ ' , each , ' ]';
				class: MockForCompilation;
				requestor: self;
				failBlock: [ exit value ];
				compile.
			self fail ] valueWithExit.
			self assert: (errorMessage = 'Variable name expected ->' or: [ errorMessage = 'Name already defined ->' ]).
			self assert: errorLocation equals: 11 ]
]

{ #category : #'tests - shadowing' }
OCCompilerTest >> testReservedNameAsMethodArgumentShadowing [
	#('self' 'super' 'thisContext' 'true' 'false' 'nil')
		do: [ :each |
			self initializeErrorMessage.
			[ :exit |
			OpalCompiler new
				source: 'temp: ' , each , ' ^ ' , each;
				class: MockForCompilation;
				requestor: self;
				failBlock: [ exit value ];
				compile.
			self fail ] valueWithExit.
			self assert: (errorMessage = 'Variable name expected ->' or: [ errorMessage = 'Name already defined ->' ]).
			self assert: errorLocation equals: 7 ]
]

{ #category : #literals }
OCCompilerTest >> testScaledDecimalLiterals [
	"Equal ScaledDecimal with different scales should use different slots
	This is related to http://bugs.squeak.org/view.php?id=6797"

	"This correctly works when evaluated separately"

	self deny: (Smalltalk compiler evaluate: '0.5s1') scale equals: (Smalltalk compiler evaluate: '0.5s2') scale.

	"But not when evaluated together if literal reduction is too agressive"
	self deny: (Smalltalk compiler evaluate: '0.5s1 scale =  0.5s2 scale')
]

{ #category : #'tests - shadowing' }
OCCompilerTest >> testSiblingBlocksInstanceVariableShadowing [
	self initializeErrorMessage.

	OpalCompiler new
		source: 'temp [:temp | ].[:temp | |var1|]';
		class: MockForCompilation;
		requestor: self;
		failBlock: [ self assert: errorMessage equals: 'Name already defined ->'.
			self assert: errorLocation equals: 27.
			^ nil ];
		compile.
	self fail
]

{ #category : #'tests - shadowing' }
OCCompilerTest >> testSiblingBlocksTempShadowing [

	self initializeErrorMessage.

	OpalCompiler new
		source: 'temp [:temp | ]. [:temp | ]';
		class: MockForCompilation;
		failBlock: [self fail. ^ nil ];
		compile
]

{ #category : #'tests - shadowing2' }
OCCompilerTest >> testTraitTempShadowing [

	| warningCount |

	warningCount := 0.

	self initializeErrorMessage.

	[
			OpalCompiler new
				source: self tempTraitShadowingString;
				class: ArrayTest;
				failBlock: [self fail.];
				compile.
	]
	on: OCShadowVariableWarning
	do: [ :ex |
		warningCount := warningCount + 1.
		self
			assert: ex warningMessage
			equals: (self traitTempShadowingWarnings at: warningCount).

		ex resume
	].

	self assert: warningCount equals: 3
]

{ #category : #tests }
OCCompilerTest >> testUndefinedVariable [
	"This test shows that undefined variables behave as globals (for now) and is independent of the compilation mode"

	Undeclared removeKey: #undefinedName123 ifAbsent: [ ].
	self
		assert: {
			OpalCompiler new evaluate: 'undefinedName123'.
			OpalCompiler new evaluate: 'undefinedName123 := 1. undefinedName123'.
			OpalCompiler new evaluate: 'undefinedName123'.
			}
		equals: { nil. 1. 1. }.

	Undeclared removeKey: #undefinedName123 ifAbsent: [ ].
	self
		assert: {
			OpalCompiler new
				isFaulty: true;
				evaluate: 'undefinedName123'.
			OpalCompiler new
				isFaulty: true;
				evaluate: 'undefinedName123 := 2. undefinedName123'.
			OpalCompiler new
				isFaulty: true;
				evaluate: 'undefinedName123' }
		equals: { nil. 2. 2. }.

	"Cleanup"
	Undeclared removeKey: #undefinedName123 ifAbsent: [ ]
]

{ #category : #tests }
OCCompilerTest >> testUndefinedVariableFrontend [
	"This test shows that undefined variables are registered only on backend"

	Undeclared removeKey: #undefinedName123 ifAbsent: [ ].
	OpalCompiler new parse: 'foo ^undefinedName123'.
	self deny: (Undeclared includesKey: #undefinedName123).
	self should: [ OpalCompiler new compile: 'foo ^undefinedName123 ¿ 2' ] raise: SyntaxErrorNotification.
	self deny: (Undeclared includesKey: #undefinedName123).
	OpalCompiler new compile: 'foo ^undefinedName123'.
	self assert: (Undeclared includesKey: #undefinedName123).

	"Cleanup"
	Undeclared removeKey: #undefinedName123 ifAbsent: [ ]
]

{ #category : #mocking }
OCCompilerTest >> text [
	^ text
]

{ #category : #utilities }
OCCompilerTest >> traitTempShadowingWarnings [

	^ #(
		'ArrayTest>>testReplaceFromToWithStartingAt(replacementCollection is shadowed)'
		'ArrayTest>>testReplaceFromToWithStartingAt(firstIndex is shadowed)'
		'ArrayTest>>testReplaceFromToWithStartingAt(secondIndex is shadowed)'
	)
]
