"
I am a command to add conditional breakpoint into particular source node..
Condition is configured by block
 
Internal Representation and Key Implementation Points.

    Instance Variables
	conditionBlock:		<BlockClosure>
"
Class {
	#name : #ClyAddConditionalBreakpointCommand,
	#superclass : #ClyAddBreakpointCommand,
	#instVars : [
		'conditionBlock'
	],
	#category : #'Calypso-SystemPlugins-Reflectivity-Browser-Breakpoints'
}

{ #category : #activation }
ClyAddConditionalBreakpointCommand class >> contextMenuOrder [
	^1.2
]

{ #category : #execution }
ClyAddConditionalBreakpointCommand >> applyBreakpointCondition: aBreakpoint [
	aBreakpoint condition: conditionBlock
]

{ #category : #accessing }
ClyAddConditionalBreakpointCommand >> conditionBlock [
	^ conditionBlock
]

{ #category : #accessing }
ClyAddConditionalBreakpointCommand >> conditionBlock: anObject [
	conditionBlock := anObject
]

{ #category : #'block generation' }
ClyAddConditionalBreakpointCommand >> conditionBlockProducerMethodAST: conditionString [
	| conditionBlockProducerMethodAST conditionAST |
	conditionAST := self parserClass parseExpression: conditionString.
	conditionBlockProducerMethodAST := RBMethodNode
		selector: #conditionBlockGenerator
		body:
			(RBReturnNode
				value:
					(RBBlockNode
						arguments: {(RBVariableNode named: 'ThisContext')}
						body:
							(RBMessageNode
								receiver: (RBVariableNode named: 'Breakpoint')
								selector: #checkBreakConditionValue:
								arguments: {conditionAST}) asSequenceNode)) asSequenceNode.
	conditionBlockProducerMethodAST := self
		rewriteASTToSimulateExecutionInADifferentContext: conditionBlockProducerMethodAST.
	conditionBlockProducerMethodAST
		source: conditionBlockProducerMethodAST formattedCode.
	"The following commented code is a failed attempt at adding a comment to the conditionBlockProducerMethod source code, saying that it is autogenerated and that modifying it is pointless."
	"conditionBlockProducerMethodAST comments: {RBComment with: 'Auto generated' at: (conditionBlockProducerMethodAST selector size)}."
	"Setting a source code for the AST, so that inspecting it, for example after an exception occured, works."
	^ conditionBlockProducerMethodAST
]

{ #category : #accessing }
ClyAddConditionalBreakpointCommand >> defaultMenuItemName [
	^'Break on  ', sourceNode displaySourceCode, '  when ...'
]

{ #category : #'block generation' }
ClyAddConditionalBreakpointCommand >> generateConditionBlockFrom: aString [
	| conditionBlockProducerMethodAST |
	conditionBlockProducerMethodAST := self conditionBlockProducerMethodAST: aString.

	^ ((conditionBlockProducerMethodAST generateWithSource) valueWithReceiver: nil arguments: {}).
]

{ #category : #'block generation' }
ClyAddConditionalBreakpointCommand >> parserClass [
	^ RBParser
]

{ #category : #execution }
ClyAddConditionalBreakpointCommand >> prepareFullExecutionInContext: aBrowserContext [
	super prepareFullExecutionInContext: aBrowserContext.
	
	conditionBlock := self requestConditionBlock
]

{ #category : #execution }
ClyAddConditionalBreakpointCommand >> requestConditionBlock [
	| script |
	script := 'true'.
	script := UIManager default 
		request: 'This expression will be evaluated in the context of the position of this breakpoint.
		You can use variables, globals, `thisContext`, `self` and `super`.
		`:=` and Pool variables are not supported`'
		initialAnswer: script
		title: 'Break on what condition?'.
	script isEmptyOrNil ifTrue: [ CmdCommandAborted signal ].
	^ self generateConditionBlockFrom: script
]

{ #category : #'block generation' }
ClyAddConditionalBreakpointCommand >> rewriteASTToSimulateExecutionInADifferentContext: anAST [
	| semanticallyAnalysedMethodAST allUndeclaredVariableNodes allUndeclaredVariableSymbols rewriter rewrittenConditionBlockProducerAST allMessageNodes receiverSuperclassValueNode intermediateAST analysedIntermediateAST rewriter2 |
	"AnAST is the AST of a method returning a block taking a context as its argument named `ThisContext` and whose body is the condition of this conditional breakpoint.
	The goal is to rewrite this AST so that evaluating the block by passing it a context as argument will evaluate its body as it would have been evaluated in the passed context.
	To do this, we rewrite anAST following these three rules:
	1) Rewriting references to variables named 'ThisContext' into context lookups to avoid conflicts with the 'ThisContext' argument of the block.
	For example, a reference to a variable named ThisContext is rewritten into `ThisContext readVariableNamed: #ThisContext`
	2) Replacing all message nodes whose receiver is super with alternative ast replicating the method lookup a message send to super has.
		For example, 'super foo: 1' is rewritten into 'ThisContext receiver perform: #foo withArguments: 1 inSuperclass: ThisContext receiver class superclass'
	3) Rewriting references to undeclared variables into context lookup
		For example, a reference to a variable named flower is rewritten into `ThisContext readVariableNamed: #flower`
	4) Rewriting references to `thisContext` into references to `ThisContext`
	5) Rewriting references to `self` into references to `ThisContext receiver`"
	rewriter := RBParseTreeRewriter new.
	semanticallyAnalysedMethodAST := anAST doSemanticAnalysis.	"To find which variables are undefined"
	rewriter
		replace: (RBVariableNode named: #ThisContext) name
		with:
			'(ThisContext readVariableNamed: #'
				, (RBVariableNode named: #ThisContext) name , ')'.
	allMessageNodes := semanticallyAnalysedMethodAST allChildren
		select: [ :astElem | astElem isMessage ].
	receiverSuperclassValueNode := self parserClass
		parseExpression: 'ThisContext receiver class superclass'.
	allMessageNodes
		do: [ :msgNode | 
			msgNode receiver isSuperVariable
				ifTrue: [ rewriter
						replaceTree: msgNode
						withTree:
							(RBMessageNode
								receiver: (self parserClass parseExpression: 'ThisContext receiver')
								selector: #perform:withArguments:inSuperclass:
								arguments:
									{(RBLiteralValueNode value: msgNode selector).
									(RBArrayNode statements: msgNode arguments).
									receiverSuperclassValueNode}) ] ].
	intermediateAST := rewriter
		executeTree: semanticallyAnalysedMethodAST;
		tree.
	analysedIntermediateAST := intermediateAST doSemanticAnalysis.
	rewriter2 := RBParseTreeRewriter new.
	allUndeclaredVariableNodes := analysedIntermediateAST allChildren
		select: [ :astElem | astElem isVariable and: [ astElem isUndeclaredVariable ] ].
	allUndeclaredVariableSymbols := (allUndeclaredVariableNodes
		collect: [ :varNode | varNode name ]) asSet asArray.
	allUndeclaredVariableSymbols
		withIndexDo: [ :tempName :index | 
			rewriter2
				replace: tempName
				with: '(ThisContext readVariableNamed: #' , tempName , ')' ].
	rewriter2 replace: 'thisContext' with: 'ThisContext'.
	rewriter2 replace: 'self' with: 'ThisContext receiver'.
	rewrittenConditionBlockProducerAST := rewriter2
		executeTree: analysedIntermediateAST;
		tree.
	^ rewrittenConditionBlockProducerAST doSemanticAnalysis
]
