"
A changes browser for the changes generated by the rewrite critique editor

If you click on 'Split', I will display a SpDiffPresenter with changes for resolve the selected critique.
If you click on 'Uniffied', I will display a CBUnifiedDiffChangesMorph with changes for resolve the selected critique.

You can open me whit:
`CBRewriteCritiqueChangesBrowser open`.



"
Class {
	#name : #CBRewriteCritiqueChangesBrowser,
	#superclass : #RewriteRuleChangesBrowser,
	#instVars : [
		'changeUnifiedOption',
		'changeSplitOption'
	],
	#category : #'Tool-CriticBrowser-Transform'
}

{ #category : #specs }
CBRewriteCritiqueChangesBrowser class >> defaultSpec [

	^ SpBoxLayout newTopToBottom
		  add: (SpPanedLayout newTopToBottom
				   add: #changeTree;
				   add: (SpBoxLayout newTopToBottom
						    add: (SpBoxLayout newLeftToRight
								     add: #changeSplitOption width: 90;
								     add: #changeUnifiedOption width:90;
								     yourself)
						    height: 25;
						    add: #diffView;
						    yourself);
				   yourself);
		  add: (SpBoxLayout newLeftToRight
				   addLast: #buttonCancel
				   expand: false
				   fill: true
				   padding: 2;
				   addLast: #buttonOk
				   expand: false
				   fill: false
				   padding: 0;
				   yourself)
		  expand: false
		  fill: false
		  padding: 2;
		  yourself
]

{ #category : #specs }
CBRewriteCritiqueChangesBrowser class >> open [

	<example>
	^ self new openWithSpec
]

{ #category : #accessing }
CBRewriteCritiqueChangesBrowser >> applyChangesInSplit [
   changeTree selectedItem ifNotNil: [ 
	diffView := self newDiff.
	self buildDiffFor: changeTree selectedItem.
	self update.].
]

{ #category : #accessing }
CBRewriteCritiqueChangesBrowser >> applyChangesInUnified [
changeTree selectedItem ifNotNil: [ 
	diffView := SpMorphPresenter new morph: (CBUnifiedDiffChangesMorph
			             from: changeTree selectedItem oldVersionTextToDisplay
			             to: changeTree selectedItem textToDisplay).
	self update].
]

{ #category : #accessing }
CBRewriteCritiqueChangesBrowser >> changes: anObject [
	changes := anObject.
	selectedChanges := OrderedCollection with: changes first.
	self updateChanges
]

{ #category : #initialization }
CBRewriteCritiqueChangesBrowser >> connectPresenters [

	super connectPresenters.
		changeUnifiedOption whenActivatedDo: [ self applyChangesInUnified ].
		changeSplitOption whenActivatedDo: [ self applyChangesInSplit ].
	changeUnifiedOption state: false.
	changeSplitOption state: true.
		
]

{ #category : #initialization }
CBRewriteCritiqueChangesBrowser >> initializePresenters [

	super initializePresenters.
	changeUnifiedOption := self newUnifiedRadioButton.
	changeSplitOption := self newSplitRadioButton.
	changeSplitOption associatedRadioButtons: { changeUnifiedOption }.
	changeTree whenSelectionChangedDo: [ :selection | 
		self buildDiffFor: selection selectedItem ]
]

{ #category : #accessing }
CBRewriteCritiqueChangesBrowser >> newSplitRadioButton [
	^ self newRadioButton
	label: 'Split Diff';
	state: false.
]

{ #category : #accessing }
CBRewriteCritiqueChangesBrowser >> newUnifiedRadioButton [
	^ self newRadioButton
	label: 'Unified Diff';
		state: false.
]

{ #category : #update }
CBRewriteCritiqueChangesBrowser >> updateChanges [ 
	super updateChanges.
	changeTree roots
        ifNotEmpty: [ changeTree selectItem: changeTree roots first ].
	
]
