"
Unit test for trait handling when classes are removed
"
Class {
	#name : 'T2ObsoleteClassTest',
	#superclass : 'T2AbstractTest',
	#category : 'TraitsV2-Tests',
	#package : 'TraitsV2-Tests'
}

{ #category : 'tests' }
T2ObsoleteClassTest >> testObsoleteClassIsRemovedFromUsers [

	| t1 t2 c1 |
	t1 := self makeTrait: [ :builder | builder name: #T1 ].
	t2 := self makeTrait: [ :builder | builder name: #T2 ].

	c1 := self make: [ :aClassBuilder |
		      aClassBuilder
			      name: #C1;
			      traits: t1 + t2 ].

	self assert: (t1 users includes: c1).
	self assert: (t2 users includes: c1).

	c1 removeFromSystem.

	self deny: (t1 users includes: c1).
	self deny: (t2 users includes: c1)
]

{ #category : 'tests' }
T2ObsoleteClassTest >> testObsoleteClassIsRemovedFromUsersClassSide [

	| t1 t2 c1 |
	t1 := self makeTrait: [ :builder | builder name: #T1 ].
	t2 := self makeTrait: [ :builder | builder name: #T2 ].

	c1 := self make: [ :aClassBuilder | aClassBuilder name: #C1 ].
	c1 class setTraitComposition: t1 + t2.

	self assert: (t1 users includes: c1 class).
	self assert: (t2 users includes: c1 class).

	c1 removeFromSystem.

	self deny: (t1 users includes: c1 class).
	self deny: (t2 users includes: c1 class)
]

{ #category : 'tests' }
T2ObsoleteClassTest >> testObsoleteTraitIsRemovedFromUsers [

	| t1 t2 t3 |
	t1 := self makeTrait: [ :builder | builder name: #T1 ].
	t2 := self makeTrait: [ :builder | builder name: #T2 ].

	t3 := self makeTrait: [ :aClassBuilder |
		      aClassBuilder
			      name: #T3;
			      traits: t1 + t2 ].

	self assert: (t1 users includes: t3).
	self assert: (t2 users includes: t3).

	t3 removeFromSystem.

	self deny: (t1 users includes: t3).
	self deny: (t2 users includes: t3)
]
