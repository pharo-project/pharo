"
ProfStef is the Pharo teacher. To start the tutorial, evaluate:

[[[ 
ProfStef go.
]]]
To go to the next lesson evaluate:

[[[
ProfStef next.
]]]

To execute your own tutorial:
[[[
ProfStef goOn: MyOwnTutorial
]]]

MyOwnTutorial should be a subclass of AbstractTutorial.

To see a table of contents with all defined tutorials:

[[[
ProfStef contents 

Metacello Configuration Tutorial Part1
	ProfStef goOn: MetacelloConfigurationTutorialPart1

Metacello Configuration Tutorial Part2
	ProfStef goOn: MetacelloConfigurationTutorialPart2

Metacello Development Cycle
	ProfStef goOn: MetacelloDevelopmentProcess

Inside Metacello Toolbox API
	ProfStef goOn: MetacelloToolBoxTutorial

Pharo Syntax Tutorial
	ProfStef goOn: PharoSyntaxTutorial

'
]]]

Metacello Configuration Tutorial Part1
	ProfStef goOn: MetacelloConfigurationTutorialPart1

Metacello Configuration Tutorial Part2
	ProfStef goOn: MetacelloConfigurationTutorialPart2

Metacello Development Cycle
	ProfStef goOn: MetacelloDevelopmentProcess

Inside Metacello Toolbox API
	PharoTutorial goOn: MetacelloToolBoxTutorial

Pharo Syntax Tutorial
	ProfStef goOn: PharoSyntaxTutorial
'
]]]

ProfStef is interacting with a tutorial player (which encapsulate the logic of navigating within lessons) and lessonView (a dead simple little UI).


"
Class {
	#name : 'ProfStef',
	#superclass : 'Model',
	#instVars : [
		'lessonView',
		'player'
	],
	#classVars : [
		'Instance'
	],
	#category : 'ProfStef-Core',
	#package : 'ProfStef-Core'
}

{ #category : 'zen' }
ProfStef class >> aboutPharoZen [
	^ 'These are the Pharo Zen values.\\See:\\  ProfStef class>>#pharoZenValues\\Inspect:\\  PharoTutorial pharoZenValues' withCRs
]

{ #category : 'cleanup' }
ProfStef class >> cleanUp [

	self reset
]

{ #category : 'accessing' }
ProfStef class >> contents [
	"Build table of contents with all defined tutorials."

	^ AbstractTutorial contentsOfTutorials
]

{ #category : 'class initialization' }
ProfStef class >> default [

	^ Instance ifNil: [ Instance := self new ]
]

{ #category : 'navigating' }
ProfStef class >> first [

	^ self default first
]

{ #category : 'navigating' }
ProfStef class >> go [

	^ self default go
]

{ #category : 'navigating' }
ProfStef class >> goOn: aTutorialClass [

	^ self default goOn: aTutorialClass
]

{ #category : 'navigating' }
ProfStef class >> last [

	^ self default last
]

{ #category : 'world menu' }
ProfStef class >> menuCommandOn: aBuilder [
	<worldMenu>

	(aBuilder item: #'Pharo Zen')
		parent: #PharoHelp;
		order: 3;
		action: [ self openPharoZenWorkspace ];
		iconName: #smallPharo;
		help: 'Pharo values.'
]

{ #category : 'navigating' }
ProfStef class >> next [

	^ self default next
]

{ #category : 'zen' }
ProfStef class >> openPharoZenWorkspace [
    "Open a Workspace showing the Pharo Zen values in random order"

    <script>
    | presenter |
    presenter := SpTextPresenter new
        text: self pharoZenValuesContents;
        open.

    presenter
        withWindowDo: [ :w |
            w
                title: 'Pharo Zen' translated;
                aboutText: self aboutPharoZen ]
]

{ #category : 'zen' }
ProfStef class >> pharoZenValues [
	"Our values and convictions are condensed in this simple list."

	^ #(
		'Easy to understand, easy to learn from, easy to change.'
		'Objects all the way down.'
		'Examples to learn from.'
		'Fully dynamic and malleable.'
		'Beauty in the code, beauty in the comments.'
		'Simplicity is the ultimate elegance.'
		'Better a set of small polymorphic classes than a large ugly one.'
		'Classes structure our vocabulary.'
		'Messages are our vocabulary.'
		'Polymorphism is our esperanto.'
		'Abstraction and composition are our friends.'
		'Tests are important but can be changed.'
		'Explicit is better than implicit.'
		'Magic only at the right place.'
		'One step at a time.'
		'There is no unimportant fix.'
		'Learning from mistakes.'
		'Perfection can kill movement.'
		'Quality is an emerging property.'
		'Simple processes to support progress.'
		'Communication is key.'
		'A system with robust abstractions that a single person can understand.' )
]

{ #category : 'zen' }
ProfStef class >> pharoZenValuesContents [
	"Return a string with CRs listing the Pharo Zen values in random order"

	^ String streamContents: [ :stream |
			stream << (self class >> #pharoZenValues) comment withoutQuoting; cr; cr.
			self pharoZenValues shuffled
				do: [ :each | stream << each ]
				separatedBy: [ stream cr ]]
]

{ #category : 'navigating' }
ProfStef class >> previous [

	^ self default previous
]

{ #category : 'class initialization' }
ProfStef class >> reset [
	<script>

	Instance := nil
]

{ #category : 'starting' }
ProfStef class >> tutorial: aTutorialClass lesson: aSelector [

	self default tutorial: aTutorialClass lesson: aSelector
]

{ #category : 'starting' }
ProfStef class >> tutorial: aTutorialClass lessonAt: lessonIndex [

	self default tutorial: aTutorialClass lessonAt: lessonIndex
]

{ #category : 'gui' }
ProfStef >> close [

	self lessonView close
]

{ #category : 'navigating' }
ProfStef >> first [

	self player first.
	^ self showCurrentLesson
]

{ #category : 'navigating' }
ProfStef >> go [

	^ self goOn: PharoSyntaxTutorial
]

{ #category : 'navigating' }
ProfStef >> goOn: aTutorialClass [

	self player tutorial: aTutorialClass new.
	^ self open
]

{ #category : 'navigating' }
ProfStef >> last [

	self player last.
	^ self showCurrentLesson
]

{ #category : 'accessing' }
ProfStef >> lessonView [

	^ lessonView
			ifNil: [ lessonView := LessonView new ]
]

{ #category : 'accessing' }
ProfStef >> lessonView: aLessonView [

	lessonView := aLessonView
]

{ #category : 'navigating' }
ProfStef >> next [

	self lessonView isOpenInWindow
		ifTrue: [
			self player next.
			self showCurrentLesson ]
]

{ #category : 'instance creation' }
ProfStef >> open [

	self player first.
	^ self showCurrentLesson
]

{ #category : 'accessing' }
ProfStef >> player [

	^ player ifNil: [ player := TutorialPlayer new ]
]

{ #category : 'accessing' }
ProfStef >> player: aTutorialPlayer [

	player := aTutorialPlayer
]

{ #category : 'navigating' }
ProfStef >> previous [

	self lessonView isOpenInWindow
		ifTrue: [
			self player previous.
			self showCurrentLesson ]
]

{ #category : 'gui' }
ProfStef >> showCurrentLesson [

	| progressInfo lesson |
	lesson := self player currentLesson.
	progressInfo := '(', self tutorialPositionString, '/', self tutorialSizeString, ')'.
	^ self lessonView
		showLesson: lesson
		withTitle: lesson title, ' ', progressInfo
]

{ #category : 'navigating' }
ProfStef >> tutorial: aTutorialClass lesson: aSelector [

	| tutorial |
	tutorial := aTutorialClass new.
	self player tutorial: tutorial.
	self tutorial: aTutorialClass lessonAt: (tutorial indexOfLesson: aSelector)
]

{ #category : 'accessing' }
ProfStef >> tutorial: aTutorialClass lessonAt: lessonIndex [

	self player tutorial: aTutorialClass new.
	self player tutorialPosition: lessonIndex.
	self showCurrentLesson
]

{ #category : 'accessing' }
ProfStef >> tutorialPositionString [

	^ player tutorialPosition asString
]

{ #category : 'accessing' }
ProfStef >> tutorialSizeString [

	^ self player size asString
]
